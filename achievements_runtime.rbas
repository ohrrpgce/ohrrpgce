'OHRRPGCE GAME - in-game support for achievements
'(C) Copyright 1997-2020 James Paige, Ralph Versteegen, and Hamster Republic Productions
'Please read LICENSE.txt for GPL License details and disclaimer of liability
'
#include "achievements_runtime.bi"
#include "achievements.bi"
#include "moresubs.bi"
#include "purchase.bi"
#include "steam.bi"
#include "vbcompat.bi" 'for NOW

' -- achievements_runtime
' This file contains functionality related to implementing achievements during gameplay. This includes
' keeping track of seen tags, progress values, etc, as well as logic to reward achievements if
' appropriate.
'
' Assumptions:
' * achievement definitions (achievements.rbas) have been loaded
' * the indexes in achievement_progress match the indexes in the achievement definitions
' 
' IDs (in the type-member sense) are _not_ used to match achievements. These IDs are only for save data


' uncomment to enable spammy debug output
' #define DEBUG_ACHIEVEMENTS

using Reload

namespace Achievements

  declare function mark_tag_as_seen(index as integer, tag as integer) as boolean
  declare function needs_rewarding(index as integer) as boolean
  declare function needs_progress_update(index as integer) as boolean
  declare sub reward_achievement(index as integer)

  #ifdef DEBUG_ACHIEVEMENTS
  declare sub ach_debug(msg as string) ' this is actually defined in achievements.rbas
  #else
  #define ach_debug(x)
  #endif


  ' -- globals --
  dim shared achievement_progress() as AchievementProgress
  dim shared save_loaded as boolean = false

  ' -- public api --

  sub evaluate_tags()
    ach_debug("achievements_evaluate_tags")

    if save_loaded = false then
      ach_debug("save is not loaded, aborting evaluation")
      return 'don't evaluate anything before the save has actually been loaded
    end if

    for index as integer = 0 to ubound(achievement_progress)
      ach_debug("evaluating #" & index)

      if achievement_progress(index).rewarded then continue for ' ignore rewarded achievements

      with get_definition_by_index(index)
        ach_debug("evaluating '" & .name & "'")
        for t as integer = 0 to v_len(.tags) - 1
          dim tag as integer = .tags[t]

          if mark_tag_as_seen(index, tag) then
            if needs_rewarding(index) then
              ' reward the achievement
              reward_achievement index
            elseif needs_progress_update(index) then
              ' ping user with progress
              ach_debug("notifying progress on '" & .name & "'")
              Steam.notify_achievement_progress .steam_id, achievement_progress(index).value, .max_value
            end if
          end if
        next
      end with
    next
  end sub

  sub runtime_reset
    dim count as integer = definitions_count()
    ach_debug("resetting achievement data to " & count)

    if count = 0 then
      erase achievement_progress
    else
      redim achievement_progress(count - 1)
    end if
    
    save_loaded = false
  end sub

  sub runtime_load(node as Reload.NodePtr)
    runtime_reset

    ach_debug("loading save game")

    for index as integer = 0 to ubound(achievement_progress)
      achievement_progress(index).id = get_definition_by_index(index).id
    next

    if node <> null then
      READNODE node
        WITHNODE node."achievement" as achievement
          dim progress as AchievementProgress ptr = null
          dim id as integer = GetInteger(achievement)

          for index as integer = 0 to ubound(achievement_progress)
            if achievement_progress(index).id = id then
              ach_debug("progress in slot " & index & " has index " & id)
              progress = @achievement_progress(index)
              exit for
            else
              ach_debug("progress in slot " & index & " has wrong index")
            end if 
          next

          if progress <> null then
            progress->value = achievement."value".integer
            progress->rewarded = achievement."rewarded".exists
            progress->rewarded_date = achievement."rewarded_date".double

            ach_debug("loaded progress of " & progress->value & " for id " & id)
            ach_debug("loaded rewarded state of " & progress->rewarded & " for id " & id)
            dim tag as Nodeptr = FirstChild(achievement."tags".ptr, "tag")
            while tag <> null
              dim t as integer = GetInteger(tag)
              ach_debug("noted tag " & t & " for id " & id)
              v_append progress->seen_tags, t
              tag = NextSibling(tag, "tag")
            wend
          else
            ach_debug("Encountered data for missing achievement with id " & id & ". Discarding")
          end if
        END WITHNODE
      END READNODE
    end if

    ach_debug("done loading save game")
    save_loaded = true
  end sub

  sub runtime_save(node as NodePtr)
    ach_debug("saving achievement data")
    
    if ubound(achievement_progress) < 0 then
      ach_debug("no achievements to save")
      return
    end if

    dim achievements_node as NodePtr = AppendChildNode(node, "achievements")

    for index as integer = 0 to ubound(achievement_progress)
      with achievement_progress(index)
        ach_debug("State of achievement id " & .id & ": Value=" & .value & ", tags=" & v_len(.seen_tags))
        
        if .value <= 0 andalso .rewarded = false andalso v_len(.seen_tags) <= 0 then continue for

        dim achievement as NodePtr = AppendChildNode(achievements_node, "achievement", .id)
        AppendChildNode(achievement, "value", .value)
        if .rewarded then
          SetChildNodeDate(achievement, "rewarded", NOW())
        end if

        dim tags as NodePtr = AppendChildNode(achievement, "tags")
        for t as integer = 0 to v_len(.seen_tags) - 1
          AppendChildNode(tags, "tag", .seen_tags[t])
        next
      end with
    next
  end sub

  ' -- members for AchievementProgress --

  constructor AchievementProgress
    ach_debug("AchivementProgress constructor")
    v_new seen_tags
  end constructor

  destructor AchievementProgress
    ach_debug("AchivementProgress destructor")
    v_free seen_tags
  end destructor

  ' -- internal functions --

  private function mark_tag_as_seen(index as integer, tag as integer) as boolean
    ach_debug("mark_tag_as_seen")

    if achievement_progress(index).rewarded then return false ' ignore rewarded achievements

    with get_definition_by_index(index)
      dim is_triggered as boolean = istag(tag)
      dim ix as integer = v_find(achievement_progress(index).seen_tags, tag)
      ach_debug("Relevant tag " & tag & " is " & is_triggered)
      if is_triggered and ix = -1 then
        ach_debug("This means that is is now on!")
        v_append achievement_progress(index).seen_tags, tag
        if .achievement_type = AchievementType.count and achievement_progress(index).value < .max_value then
          achievement_progress(index).value += 1
        end if
        return true
      elseif .latching = false andalso is_triggered = false andalso ix <> -1 then
        ach_debug("This means that is is now off!")
        v_remove achievement_progress(index).seen_tags, tag
        ' note: disabling a tag does _not_ decrement the value
        ' for this reason, we return false since the achievement state didn't really change
        return false
      end if
    end with

    return false
  end function

  private function needs_rewarding(index as integer) as boolean
    ach_debug("needs_rewarding")
    dim byref achievement as AchievementDefinition = get_definition_by_index(index)
    dim byref progress as AchievementProgress = achievement_progress(index)

    if progress.rewarded then return false ' ignore rewarded achievements

    select case achievement.achievement_type
      case AchievementType.flag
        for ix as integer = 0 to v_len(achievement.tags) - 1
          dim tag as integer = achievement.tags[ix]
          if v_find(progress.seen_tags, tag) = -1 then
            ach_debug(":( '" & achievement.name & "' is not complete because tag " & tag & " is not set")
            return false
          end if
        next
      case AchievementType.count
        if progress.value < achievement.max_value then
          ach_debug(":( '" & achievement.name & "' is not complete because value " & progress.value & " is less than " & achievement.max_value)
          return false
        end if
    end select
    ach_debug(":D '" & achievement.name & "' is complete!")
    return true
  end function

  ' call this _after_ checking is_complete!
  private function needs_progress_update(index as integer) as boolean
    ach_debug("needs_progress_update(" & index & ")")
    dim byref achievement as AchievementDefinition = get_definition_by_index(index)
    dim byref progress as AchievementProgress = achievement_progress(index)

    ach_debug((achievement.achievement_type = AchievementType.count) & _
      ", " & (achievement.progress_interval > 0) & _
      ", " & (progress.value > 0) & _
      ", " & (progress.value mod achievement.progress_interval) _
    )
    return achievement.achievement_type = AchievementType.count _
      andalso achievement.progress_interval > 0 _
      andalso progress.value > 0 _
      andalso (progress.value mod achievement.progress_interval) = 0
  end function

  private sub reward_achievement(index as integer)
    dim needs_persist as boolean = false

    with get_definition_by_index(index)
      if .steam_id <> "" then
        ach_debug("rewarding '" & .name & "'")
        Steam.reward_achievement .steam_id
      end if
    end with

    with achievement_progress(index)
      .rewarded = true
      .rewarded_date = NOW

      ' if permanent, persist in global store
      if is_permanent() then
        ach_debug("adding achievement to persist.reld")

        dim persist as NodePtr = get_persist_reld()
        dim path as string = "/achievements/achievement[" & .id & "]"
        if NodeByPath(persist, path) = 0 then
          ach_debug("achievement not in persist.reld... adding now!")
          dim achievement as NodePtr = NodeByPath(persist, path, true)
          SetChildNodeDate(achievement, "rewarded_date", NOW())
          write_persist_reld
        else
          ach_debug("achievement already in persist.reld, skipping")
        end if
      else
        ach_debug("achievmeent is per-save, so not adding to persist")
      end if
    end with
  end sub

  #ifdef DEBUG_ACHIEVEMENTS
  private sub ach_debug(msg as string)
    debug "achievements: " & msg
  end sub
  #endif

end namespace
