'OHRRPGCE - CUSTOM editor helper code
'(C) Copyright 1997-2020 James Paige, Ralph Versteegen, and Hamster Republic Productions
'Please read LICENSE.txt for GPL License details and disclaimer of liability

' This file is for utility code (generally for editing) used by CUSTOM but not by GAME.
' Some editors are also here, but ought to be split into separate files.

#include "config.bi"
#include "string.bi" 'for format
#include "vbcompat.bi" 'for NOW
#include "allmodex.bi"
#include "common.bi"
#include "loading.bi"
#include "const.bi"
#include "scrconst.bi"
#include "cglobals.bi"
#include "reload.bi"
#include "slices.bi"
#include "custom.bi"
#include "customsubs.bi"
#include "thingbrowser.bi"
#include "sliceedit.bi"
#include "editorkit.bi"

'Subs and functions only used here
DECLARE SUB cond_editor (cond as Condition, default as bool = NO, outer_state as MenuState)
DECLARE SUB platform_options_append_gamepad_button_menu_items (byval gamepad as NodePtr, menu as MenuDef, byval use_dpad as bool, buttons() as string, default_scancodes() as integer)
DECLARE SUB edit_button_name_strings()
DECLARE FUNCTION edit_purchase_enumgrabber(byval node as NodePtr, enumstr() as string) as bool
DECLARE FUNCTION edit_purchase_enumbrowse(caption as string, byval node as NodePtr, enumstr() as string, helpkey as string) as bool
DECLARE SUB edit_purchase_options_rebuild_menu(menu as MenuDef, st as MenuState, byval purchase_root as NodePtr)

DECLARE FUNCTION create_attack_preview_dummy_slice(caption as string, byval parent as Slice Ptr) as Slice Ptr
DECLARE FUNCTION create_attack_preview_slice(caption as string, byval attack_id as integer, byval parent as Slice Ptr) as Slice Ptr
DECLARE SUB init_attack_chain_screen(byval attack_id as integer, state as AttackChainBrowserState)
DECLARE SUB attack_preview_slice_focus(byval sl as Slice Ptr)
DECLARE SUB attack_preview_slice_defocus(byval sl as Slice Ptr)
DECLARE FUNCTION find_free_attack_preview_slot(slots() as Slice Ptr) as integer
DECLARE SUB position_chain_preview_boxes(sl_list() as Slice ptr, st as MenuState)
DECLARE SUB check_used_onetime_npcs_npcdata(bits() as integer, npcdata() as NPCType, mapnum as integer)


'Module-local variables
DIM SHARED comp_strings() as string
REDIM comp_strings(7) as string 
comp_strings(0) = ""
comp_strings(1) = "="
comp_strings(2) = "<>"
comp_strings(3) = "<"
comp_strings(4) = "<="
comp_strings(5) = ">"
comp_strings(6) = ">="
comp_strings(7) = "tag"   'debugging use only


FUNCTION safe_tag_name(byval tagnum as integer) as string 
 IF tagnum >= 1 AND tagnum <= gen(genMaxTagName) THEN
  RETURN load_tag_name(tagnum)
 ELSE
  RETURN ""
 END IF
END FUNCTION

'Return YES if the tag has changed
'allowspecial:  Whether to allow picking autoset tags (eg hero is alive)
'               If you want to change this, use tag_set_grabber instead if possible.
'always_choice: 'Always' is an option
'allowneg:      Allow set tag=OFF.
'               If you want to change this, use tag_id_grabber instead if possible.
FUNCTION tag_grabber (byref n as integer, state as MenuState, allowspecial as bool=YES, always_choice as bool=NO, allowneg as bool=YES) as bool
 DIM min as integer = 0
 IF allowneg THEN min = -max_tag()
 IF intgrabber(n, min, max_tag()) THEN RETURN YES
 IF enter_space_click(state) THEN
  DIM browse_tag as integer
  browse_tag = tags_menu(n, YES, allowspecial, allowneg, always_choice)
  IF browse_tag <> n THEN
   n = browse_tag
   RETURN YES
  END IF
 END IF
 RETURN NO
END FUNCTION

'A tag_grabber wrapper for set tag ON/OFF actions.
'Return YES if the tag has changed
FUNCTION tag_set_grabber (byref n as integer, state as MenuState) as bool
 RETURN tag_grabber(n, state, NO)
END FUNCTION

'A tag_grabber wrapper for tag ids to define as autoset tags: no on/off
'selection, and you usually shouldn't have multiple autoset settings for the same tag
'Return YES if the tag has changed
FUNCTION tag_id_grabber (byref n as integer, state as MenuState) as bool
 RETURN tag_grabber(n, state, NO, , NO)  'allowneg=NO
END FUNCTION

LOCAL SUB tag_autoset_warning(byval tag_id as integer)
 notification !"This tag is automatically set or unset on the following conditions:\n" + describe_tag_autoset_places(tag_id) + !"\nThis means that you should not attempt to set or unset the tag in any other way, because your changes will be erased -- unpredictably!"
END SUB

'If picktag is true, then can be used to pick a tag. In that case, allowspecial indicates whether to allow
'picking 'special' tags: those automatically set, eg. based on inventory conditions
'If showsign is true, picking a tag condition (tag=ON/OFF), and the ON/OFF condition can be selected.
'Returns a signed tag number (+ve, tag ON, -ve tag OFF).
FUNCTION tags_menu (byval starttag as integer=0, byval picktag as bool=NO, byval allowspecial as bool=YES, byval showsign as bool=NO, byval always_choice as bool=NO) as integer
 STATIC searchstring as string
 
 'If this method for guessing checktag mode ever fails, we can change it to be an argument
 DIM checktag as bool = picktag ANDALSO allowspecial

 DIM thisname as string
 DIM ret as integer = starttag
 IF gen(genMaxTagname) < 1 THEN gen(genMaxTagname) = 1
 
 DIM tagid as integer vector
 DIM menu as BasicMenuItem vector

 DIM menu_size as integer = gen(genMaxTagname) + 1
 IF picktag THEN menu_size += 1
 IF always_choice THEN menu_size += 1

 v_new menu, menu_size
 v_new tagid, menu_size

 IF picktag THEN
  menu[0].text = "Cancel"
 ELSE
  menu[0].text = "Previous Menu"
 END IF
 tagid[0] = -1

 DIM menu_i as integer = 1
 
 IF picktag THEN
  'When picktag is true, it should be possible to clear the tag selection
  tagid[menu_i] = 0
  IF checktag THEN
   menu[menu_i].text = "No Tag Check"
  ELSE
   menu[menu_i].text = "No Tag Set"
  END IF
  menu_i += 1
 END IF

 IF always_choice THEN
  tagid[menu_i] = 1 'Magic value to indicate we want the "Always" tag
  menu[menu_i].text = "ALWAYS"
  menu_i += 1
 END IF

 FOR i as integer = 2 TO gen(genMaxTagname) + 1
  'Load all tag names plus the first blank name
  menu[menu_i].text = "Tag " & i & ":" & load_tag_name(i)
  tagid[menu_i] = i
  IF tag_is_autoset(i) THEN
   IF allowspecial = NO AND i <> ABS(starttag) THEN
    menu[menu_i].disabled = YES
   END IF
  END IF
  menu_i += 1
 NEXT i

 DIM tagsign as integer
 tagsign = SGN(starttag)
 IF tagsign = 0 THEN tagsign = 1

 DIM menuopts as MenuOptions
 menuopts.fullscreen_scrollbar = YES

 DIM state as MenuState
 state.autosize = YES
 state.autosize_ignore_lines = 1
 IF showsign THEN
  state.autosize_ignore_lines = 2
 END IF
 state.last = v_len(menu) - 1
 init_menu_state state, menu

 state.pt = 0
 'If ABS(starttag) >= 2 (valid tag) or 0 (do nothing), sets initial selection
 FOR i as integer = 0 to v_len(tagid) - 1
  IF tagid[i] = ABS(starttag) THEN
   state.pt = i
   EXIT FOR
  END IF
 NEXT i

 DIM int_browsing as bool = NO
 DIM uninterrupted_alt_press as bool = NO
 DIM alt_pt as integer 
 
 DIM do_search as bool = NO
 DIM search_cur_str as string
 DIM search_found as bool = NO

 setkeys YES
 DO
  setwait 55
  setkeys YES
  IF keyval(ccCancel) > 1 THEN EXIT DO
  IF keyval(scF1) > 1 THEN show_help "tagnames"
  IF keyval(scCTRL) > 0 ANDALSO keyval(scF) > 1 THEN
   IF prompt_for_string(searchstring, "Search") THEN
    do_search = YES
   END IF
  END IF
  IF keyval(scF3) > 1 THEN
   do_search = YES
  END IF
  IF do_search THEN
   do_search = NO
   IF searchstring <> "" THEN
    FOR i as integer = large(state.pt + 1, 1) TO v_len(tagid) - 1
     IF tagid[i] < 2 THEN CONTINUE FOR
     search_cur_str = load_tag_name(tagid[i])
     IF INSTR(LCASE(search_cur_str), LCASE(searchstring)) THEN
      state.pt = i
      correct_menu_state state
      search_found = YES
      EXIT FOR
     END IF
    NEXT i
    IF NOT search_found THEN
     '--wrap the search
     FOR i as integer = 1 TO state.pt - 1
      IF tagid[i] < 2 THEN CONTINUE FOR
      search_cur_str = load_tag_name(tagid[i])
      IF INSTR(LCASE(search_cur_str), LCASE(searchstring)) THEN
       state.pt = i
       correct_menu_state state
       search_found = YES
       EXIT FOR
      END IF
     NEXT i
    END IF
    search_found = NO
   END IF
  END IF
  IF usemenu(state) THEN
   IF tagid[state.pt] >= 2 THEN
    alt_pt = tagid[state.pt]
   ELSE
    alt_pt = 0
   END IF
  END IF
  IF keyval(scAlt) AND 4 THEN uninterrupted_alt_press = YES
  IF keyval(scAlt) = 0 AND uninterrupted_alt_press = YES THEN
   uninterrupted_alt_press = NO
   int_browsing XOR= YES
   IF tagid[state.pt] >= 2 THEN
    alt_pt = tagid[state.pt]
   ELSE
    alt_pt = 0
   END IF
  END IF
  IF int_browsing THEN
   IF intgrabber(alt_pt, 0, gen(genMaxTagName) + 1) THEN
    FOR i as integer = 0 TO v_len(tagid) - 1
     IF alt_pt = tagid[i] THEN
      state.pt = i
      correct_menu_state state
      EXIT FOR
     END IF
    NEXT i
   END IF
  ELSEIF showsign THEN
   IF keyval(ccLeft) > 1 ORELSE keyval(ccRight) > 1 THEN
    tagsign = tagsign * -1
   END IF
  END IF
  IF tagid[state.pt] = -1 AND enter_space_click(state) THEN
   'We want to cancel out with no changes
   ret = starttag
   EXIT DO
  END IF
  IF tagid[state.pt] = 0 AND enter_space_click(state) THEN
   'We want to return 0, clearing the tag set/check
   ret = 0
   EXIT DO
  END IF
  IF tagid[state.pt] = 1 AND enter_space_click(state) THEN
   'We want to return -1, indicating a tag-check of "ALWAYS"
   IF NOT checktag THEN debug "tags_menu() returned -1 ALWAYS when not in checktag mode."
   ret = -1
   EXIT DO
  END IF
  IF tagid[state.pt] >= 2 THEN
   IF keyval(scTab) > 1 ANDALSO tag_is_autoset(tagid[state.pt]) THEN
    tag_autoset_warning tagid[state.pt]
   END IF
   IF keyval(scAnyEnter) > 1 ORELSE menu_click(state) THEN ' Can't call enter_space_click() because we can type spaces when editing tag names
    IF menu[state.pt].disabled THEN
     tag_autoset_warning tagid[state.pt]
    ELSEIF picktag THEN
     ret = tagid[state.pt] * tagsign
     EXIT DO
    END IF
   END IF
   thisname = safe_tag_name(tagid[state.pt])
   IF int_browsing = NO ANDALSO strgrabber(thisname, 20) THEN
    uninterrupted_alt_press = NO
    save_tag_name thisname, tagid[state.pt]
    menu[state.pt].text = "Tag " & tagid[state.pt] & ":" & thisname
    IF tagid[state.pt] = gen(genMaxTagName) + 1 THEN
     IF gen(genMaxTagName) < max_tag() THEN
      gen(genMaxTagName) += 1
      v_resize menu, v_len(menu) + 1
      v_resize tagid, v_len(tagid) + 1
      tagid[state.pt + 1] = tagid[state.pt] + 1
      menu[state.pt + 1].text = "Tag " & tagid[state.pt + 1] & ":"
      state.last += 1
     END IF
    END IF
   END IF
  END IF

  clearpage dpage
  standardmenu menu, state, 0, 0, dpage, menuopts
  DIM tmpstr as string
  IF int_browsing THEN
   textcolor uilook(uiText), uilook(uiHighlight)
   tmpstr = "Tag " & alt_pt
  ELSE
   textcolor uilook(uiDisabledItem), 0
   tmpstr = "Alt:Tag #"
  END IF
  printstr tmpstr, pRight, 0, dpage
  
  IF NOT int_browsing THEN
   tmpstr = "CTRL+F Search"
   printstr tmpstr, pRight, 10, dpage
   IF LEN(searchstring) > 0 THEN
    tmpstr = "F3 Again"
    printstr tmpstr, pRight, 20, dpage
   END IF
  END IF

  IF showsign THEN
   ' Show whether we are picking a tag that can be ON or OFF
   DIM signstr as string
   IF checktag THEN
    signstr = "Check if tag is"
   ELSE
    signstr = "Set tag ="
   END IF
   signstr = signstr & " " & IIF(tagsign = 1, "ON", "OFF")
   textcolor uilook(uiText), 0
   DIM signrect as RectType
   signrect = str_rect(signstr, 0 , 0)
   signrect.x = vpages(dpage)->w - signrect.size.x
   signrect.y = vpages(dpage)->h - 16
   IF rect_collide_point(signrect, readmouse.pos) THEN
    textcolor uilook(uiSelectedItem + state.tog), uilook(uiHighlight)
    IF readmouse.release AND mouseLeft THEN tagsign *= -1
   END IF
   printstr signstr, pRight, pBottom - 8, dpage
  END IF
  
  IF tag_is_autoset(tagid[state.pt]) THEN
   'Showing tag autoset status is not important when using picktag for a tag check
   'so we only show it when in set-tag more or non-tag-picking mode
   textcolor uilook(uiDisabledItem), 0
   printstr "An auto-set tag. Press TAB for details", 0, pBottom, dpage
  END IF

  SWAP vpage, dpage
  setvispage vpage
  dowait
 LOOP
 setkeys

 v_free menu
 RETURN ret
END FUNCTION

'default: meaning of the null condition (true: ALWAYS, false: NEVER)
'alwaysedit: experimental parameter, changes behaviour of enter/space
'Return value is currently very unreliable.
FUNCTION cond_grabber (cond as Condition, default as bool = NO, alwaysedit as bool, st as MenuState) as bool

 DIM intxt as string = getinputtext
 DIM entered_operator as bool = NO
 DIM temp as integer

 WITH cond

  'debug "cond_grabber: .comp = " & comp_strings(.comp) & " tag/var = " & .tag & " value = " & .value & " editst = " & .editstate & " lastchar = " & CHR(.lastinput) & "  default = " & default

  IF keyval(scDelete) > 1 THEN
   .comp = 0
   RETURN YES
  END IF

  'Simplify
  IF .comp = compTag AND .tag = 0 THEN .comp = 0

  'enter_or_space
  IF .comp = compTag AND alwaysedit = NO THEN
   IF enter_or_space() THEN
    DIM browse_tag as integer
    browse_tag = tags_menu(.tag, YES, YES)
    IF browse_tag >= 2 OR browse_tag <= -2 THEN
     .tag = browse_tag
     RETURN YES
    ELSE
     'Return once enter/space processed
     RETURN NO
    END IF
   END IF
  ELSE
   IF keyval(scAnyEnter) > 1 THEN cond_editor(cond, default, st)
  END IF

  CONST compare_chars as string = "=<>!"
  'Use strings instead of integers for convenience -- have to decode to use
  STATIC statetable(3, 7) as string * 2 => { _
     /'Current comparison type:               '/ _
     /'None  =    <>   <    <=   >    >=  Tag '/ _
      {"=" ,"=" ,"=" ,"<=","=" ,">=","=" ,"=" },  /' = pressed  '/ _
      {"<" ,"<=","<" ,"<" ,"<" ,"<>","<" ,"<" },  /' < pressed  '/ _
      {">" ,">=",">" ,"<>",">" ,">" ,">" ,">" },  /' > pressed  '/ _
      {"<>","<>","=" ,">=",">" ,"<=","<" ,"<>"}   /' ! pressed  '/ _
  }

  'Listen for comparison operator input
  FOR i as integer = 1 TO LEN(intxt)
   DIM inchar as string = MID(intxt, i)
   DIM charnum as integer = INSTR(compare_chars, inchar)

   IF charnum THEN
    entered_operator = YES
    DIM newcomp as CompType = -1

    IF .comp = compNone OR .comp = compTag OR .editstate = 1 OR .editstate = 5 THEN
     'Ignore the current operator; we're pretending there is none
     newcomp = a_findcasei(comp_strings(), inchar)

    ELSE
     'First check whether in the middle of typing a comparison operator.
     'This special check ensure that eg. typing >= causes the operator to
     'change to >= regardless of initial state
     IF .lastinput THEN
      'Only checking input strings of len 2
      newcomp = a_findcasei(comp_strings(), CHR(.lastinput) + inchar)
     END IF

     IF newcomp = -1 THEN
      'This _temp variable is to work around a FB bug, https://sourceforge.net/p/fbc/bugs/816/
      '(Fixed in FB 1.06.)
      'It only occurs when compiling with debug=0 (without -exx. Whether adding/removing -exx causes
      'the bug to occur depends on the surrounding context in the function).
      DIM _temp as integer = charnum - 1
      DIM tempcomp as string = statetable(_temp, .comp)
      newcomp = a_findcasei(comp_strings(), tempcomp)
     END IF
    END IF

    IF newcomp > -1 THEN
     IF .comp = compNone OR .comp = compTag THEN
      'In future, largest allowable tag ID will increase
      .varnum = small(ABS(.tag), maxScriptGlobals)
      .value = 0
      .editstate = 2
     END IF
     .comp = newcomp
    END IF
   END IF

   .lastinput = ASC(inchar)
  NEXT

  'Other input: a finite state machine
  IF .comp = compNone THEN
   'No need to check for entered_operator: the comp would have changed
   .tag = 0
   IF intgrabber(.tag, -max_tag(), max_tag()) THEN
    .comp = compTag
   END IF
  ELSEIF .comp = compTag THEN
   'editstate meaning (asterisks indicate highlighting)
   '0: Tag #=OFF/ON  (no highlight)
   '1: Tag *#*=OFF/ON
   'No need to check for entered_operator
   IF INSTR(intxt, "!") THEN
    .tag = -.tag
   ELSE
    intgrabber(.tag, -max_tag(), max_tag())
   END IF
  ELSE  'Globals
   .varnum = bound(.varnum, 0, maxScriptGlobals)  'Could be negative if it was a tag condition
   'editstate is just a state id, defining the way the condition is edited and displayed
   '(below, asterisks indicate highlighting)
   '0: Global # .. #  (initial)
   '1: Global *#*
   '2: Global # *..*
   '3: Global # .. *#*
   '4: Global # *..* #
   '5: Global # *?* #
   '6: Global *#* .. #
   SELECT CASE .editstate
    CASE 0
     IF keyval(scTab) > 1 THEN
      .editstate = 3
     ELSEIF keyval(scBackspace) > 1 THEN
      'Backspace works from the right...
      intgrabber(.value, -2147483648, 2147483647)
      .editstate = 3
     ELSEIF entered_operator THEN
      .editstate = 4
     ELSE
      '...and numerals enter from the left
      temp = 0
      'Don't erase previous value when trying to inc/decrement it
      IF keyval(ccLeft) > 0 OR keyval(ccRight) > 0 THEN temp = .varnum
      IF intgrabber(temp, 0, maxScriptGlobals, , , YES) THEN
       .varnum = temp
       .editstate = 6
      END IF
     END IF
    CASE 1, 6
     IF .editstate = 6 AND keyval(scTab) > 1 THEN
      .editstate = 3
     ELSEIF entered_operator THEN
      IF .editstate = 1 THEN .editstate = 2 ELSE .editstate = 4
     ELSEIF keyval(scBackspace) > 1 AND .varnum = 0 THEN
      .editstate = 0
      .comp = compNone
     ELSE
      intgrabber(.varnum, 0, maxScriptGlobals)
     END IF
    CASE 3
     IF keyval(scTab) > 1 THEN
      .editstate = 6
     ELSEIF entered_operator THEN
      .editstate = 4
     ELSEIF keyval(scBackspace) > 1 AND .value = 0 THEN
      .editstate = 2
     ELSE
      intgrabber(.value, -2147483648, 2147483647)
     END IF
    CASE 2, 4, 5  'Operator editing
     IF keyval(scTab) > 1 THEN
      .editstate = 3
     ELSEIF .editstate = 5 AND entered_operator THEN
      .editstate = 4
     ELSEIF keyval(scBackspace) > 1 THEN
      DIM newcomp as string = comp_strings(.comp)
      IF .editstate = 5 THEN  'state 5 simulates LEN(newcomp) = 0
       .editstate = 1
      ELSEIF LEN(newcomp) = 1 THEN
       IF .editstate = 2 THEN
        .editstate = 1
       ELSEIF .editstate = 4 THEN
        .editstate = 5
       END IF
      ELSE 'LEN = 2
       .comp = a_findcasei(comp_strings(), LEFT(newcomp, 1))
      END IF
     ELSE
      temp = 0
      'IF .editstate <> 2 THEN temp = .value
      'Don't erase previous value when trying to inc/decrement it
      IF keyval(ccLeft) > 0 OR keyval(ccRight) > 0 THEN temp = .value
      IF intgrabber(temp, -2147483648, 2147483647, , , YES) THEN
       .value = temp
       .editstate = 3
      END IF
     END IF
   END SELECT
  END IF

 END WITH

 'FIXME: check if anything changed, and return YES if so
END FUNCTION

'default: meaning of the null condition (true: ALWAYS, false: NEVER)
SUB cond_editor (cond as Condition, default as bool = NO, outer_state as MenuState)
 DIM menu(10) as string
 DIM compty(10) as integer  'CompType (can't pass that to a_find)
 menu(0)  = "Cancel"
 menu(1)  = "Always"
 menu(2)  = "Never"
 menu(3)  = "Tag # ON"        : compty(3)  = compTag
 menu(4)  = "Tag # OFF"       : compty(4)  = compTag
 menu(5)  = "Global # = #"    : compty(5)  = compEq
 menu(6)  = "Global # <> #"   : compty(6)  = compNe
 menu(7)  = "Global # < #"    : compty(7)  = compLt
 menu(8)  = "Global # <= #"   : compty(8)  = compLe
 menu(9)  = "Global # > #"    : compty(9)  = compGt
 menu(10) = "Global # >= #"   : compty(10) = compGe

 DIM st as MenuState
 st.last = UBOUND(menu)
 st.size = st.last + 1
 DIM starttag as integer = 1

 ' Determine initial menu selection
 IF cond.comp = compTag AND cond.tag = 0 THEN cond.comp = compNone
 IF cond.comp = compNone THEN
  st.pt = IIF(default, 1, 2)
 ELSEIF cond.comp = compTag THEN
  starttag = ABS(cond.tag)
  IF cond.tag = 1 THEN
   st.pt = 2
  ELSEIF cond.tag = -1 THEN
   st.pt = 1
  ELSEIF cond.tag >= 2 THEN
   st.pt = 3
  ELSE
   st.pt = 4
  END IF
 ELSE
  st.pt = a_find(compty(), cond.comp)
  IF st.pt = -1 THEN st.pt = 1   'If cond.comp is invalid
 END IF

 DIM menuopts as MenuOptions
 menuopts.wide = 13 * 8  ' Minimum width
 menuopts.calc_size = YES

 ' Position to draw the menu (calculated next)
 DIM mpos as XYPair = (60, 0)

 ' Precompute the menu size
 calc_menustate_size st, menuopts, mpos.x, mpos.y, vpage

 ' Calculate screen position of the outer menu
 ' (Note: MenuState doesn't tell where the menu will be drawn; we have to assume 0,0!)
 WITH outer_state
  ' Position the new menu so that the initially selected menu item
  ' is at the same y position as the current item in the previous menu
  mpos.y = (.pt - .top) * .spacing - (st.pt - st.top) * st.spacing
  ' Make sure the new position is fully onscreen (and leave extra space at the bottom of the screen)
  mpos.y = bound(mpos.y, 0, vpages(vpage)->h - .spacing)
  IF mpos.y + st.rect.high > vpages(vpage)->h - 15 THEN mpos.y -= st.rect.high - st.spacing
 END WITH

 DIM holdpage as integer = allocatepage
 copypage vpage, holdpage

 DO
  setwait 55
  setkeys
  IF keyval(ccCancel) > 1 THEN EXIT DO
  IF keyval(scF1) > 1 THEN show_help "cond_editor"

  ' Typing a number could be any type. Select what's under the cursor
  IF compty(st.pt) <> 0 AND INSTR(getinputtext, ANY "0123456789") > 0 THEN
   cond.comp = compty(st.pt)
   cond.varnum = 0  'Clear ID so you can type it in
   cond.editstate = 6  'Editing global ID. Also valid editstate for tags.
   EXIT DO
  END IF

  ' If you start typing a relation, exit to cond_grabber which will handle it
  ' FIXME: regardless of editstate, the cond_grabber ignores the keypress
  IF INSTR(getinputtext, ANY "=<>!") > 0 THEN
   IF cond.comp = compTag OR cond.comp = compNone THEN cond.comp = compEq
   cond.editstate = 6
   EXIT DO
  END IF

  ' Exit on TAB so that you simultaneously change to the selected comparison
  ' and cond_grabber processes the TAB.
  ' Also, press TAB to select a tag option but skip the tag browser.
  IF enter_space_click(st) OR keyval(scTab) > 1 THEN
   IF compty(st.pt) THEN cond.comp = compty(st.pt)
   SELECT CASE st.pt
    CASE 0:
     EXIT DO
    CASE 1:
     IF default THEN
      cond.comp = compNone
     ELSE
      cond.comp = compTag
      cond.tag = -1
     END IF
    CASE 2:
     IF default = NO THEN
      cond.comp = compNone
     ELSE
      cond.comp = compTag
      cond.tag = 1
     END IF
    CASE 3, 4:
     IF st.pt = 4 THEN starttag *= -1  'tag=OFF
     IF keyval(scTab) > 1 THEN
      cond.tag = starttag
     ELSE
      cond.tag = tags_menu(starttag, YES, YES)
     END IF
    CASE ELSE:
     'TODO: global variable browser
     cond.editstate = 6  'start by entering global variable number
   END SELECT
   EXIT DO
  END IF

  usemenu st

  copypage holdpage, vpage
  edgeboxstyle mpos.x - 5, mpos.y - 5, st.rect.wide + 10, st.rect.high + 10, 2, vpage
  DIM msg as string
  IF compty(st.pt) = compNone THEN
  ELSEIF compty(st.pt) = compTag THEN
   msg = "ENTER to pick tag/TAB confirm"
  ELSE
   msg = "Type expression, TAB to switch"
  END IF
  edgeprint "F1 Help  " + msg, pLeft, pBottom, uilook(uiText), vpage
  standardmenu menu(), st, mpos.x, mpos.y, vpage, menuopts
  setvispage vpage
  dowait
 LOOP
 freepage holdpage
END SUB

'Returns a printable representation of a Condition with lots of ${K} colours
'default: the text displayed for a null Condition
'selected: whether this menu item is selected
'wide: max string length to return (not implemented yet)
FUNCTION condition_string (cond as Condition, selected as bool, default as string = "Always", wide as integer = 40) as string
 DIM ret as string = default
 DIM hlcol as integer = uilook(uiHighlight2)

 IF selected = NO THEN
  cond.editstate = 0
  cond.lastinput = 0
 ELSEIF cond.editstate = 0 THEN
  ' Set initial edit state to highlight the relevant part
  IF cond.comp = compTag THEN
   cond.editstate = 1
  ELSEIF cond.comp <> compNone THEN
   cond.editstate = 6   ' Initially, the global ID is edited
  END IF
 END IF

 IF cond.comp = compNone THEN
 ELSEIF cond.comp = compTag THEN
  IF cond.tag = 0 THEN
  ELSE
   IF cond.editstate = 0 THEN
    ret = "Tag " & ABS(cond.tag)
   ELSE
    ret = "Tag " & hilite(STR(ABS(cond.tag)), hlcol)
   END IF
   ret += IIF(cond.tag >= 0, "=ON", "=OFF")
   IF cond.tag = 1 THEN
    ret += " [Never]"
   ELSEIF cond.tag = -1 THEN
    ret += " [Always]"
   ELSE
    ret += " (" & load_tag_name(ABS(cond.tag)) & ")"
   END IF
  END IF
 ELSEIF cond.comp >= compEq AND cond.comp <= compGe THEN
  SELECT CASE cond.editstate
   CASE 0
    ret = "Global #" & cond.varnum & " " & comp_strings(cond.comp) & " " & cond.value
   CASE 1
    ret = "Global #" & hilite(str(cond.varnum), hlcol)
   CASE 2
    ret = "Global #" & cond.varnum & " " & hilite(comp_strings(cond.comp), hlcol)
   CASE 3
    ret = "Global #" & cond.varnum & " " & comp_strings(cond.comp) & hilite(" " & cond.value, hlcol)
   CASE 4
    ret = "Global #" & cond.varnum & " " & hilite(comp_strings(cond.comp), hlcol) & " " & cond.value
   CASE 5
    'FIXME: a tag for text background colour hasn't been implemented yet
    ret = "Global #" & cond.varnum & hilite(" ? ", hlcol) & cond.value
   CASE 6
    ret = "Global #" & hilite(cond.varnum & " ", hlcol) & comp_strings(cond.comp) & " " & cond.value
  END SELECT
 ELSE
  ret = "[Corrupt condition data]"
 END IF

 IF selected THEN
  ' Provide an indication that you can press Enter
  ret += "..."
 END IF

 RETURN ret
END FUNCTION

FUNCTION charpicker() as string
 STATIC pt as integer

 DIM i as integer
 DIM f(255) as integer
 DIM last as integer = -1
 DIM linesize as integer
 DIM offset as XYPair

 FOR i = 32 TO 255
  last = last + 1
  f(last) = i
 NEXT i

 linesize = 16
 offset.x = 160 - (linesize * 9) \ 2
 offset.y = 100 - ((last \ linesize) * 9) \ 2

 DIM tog as integer = 0
 setkeys
 DO
  setwait 55
  setkeys
  tog = tog XOR 1
  IF keyval(ccCancel) > 1 THEN
   setkeys
   RETURN ""
  END IF
  IF keyval(scF1) > 1 THEN show_help "charpicker"

  IF keyval(ccUp) > 1 THEN pt = large(pt - linesize, 0)
  IF keyval(ccDown) > 1 THEN pt = small(pt + linesize, last)
  IF keyval(ccLeft) > 1 THEN pt = large(pt - 1, 0)
  IF keyval(ccRight) > 1 THEN pt = small(pt + 1, last)

  IF enter_or_space() THEN
   setkeys
   RETURN CHR(f(pt))
  END IF
  
  DIM hover as integer = -1
  FOR i = 0 TO last
   IF rect_collide_point(XYWH(offset.x + (i MOD linesize) * 9, offset.y + (i \ linesize) * 9, 9, 9), readmouse.pos) THEN hover = i
  NEXT i
  IF hover >= 0 THEN
   IF (readmouse.buttons AND mouseLeft) ORELSE (readmouse.buttons AND mouseRight) THEN
    pt = hover
   END IF
   IF (readmouse.release AND mouseLeft) THEN
    setkeys
    RETURN CHR(f(pt))
   END IF
  ELSE
   'outside of menu area
   IF (readmouse.release AND mouseLeft) ORELSE (readmouse.release AND mouseRight) THEN
    setkeys
    RETURN ""
   END IF
  END IF

  clearpage dpage
  DIM col as integer
  DIM bg as integer
  FOR i = 0 TO last
   col = uilook(uiMenuItem)
   bg = uilook(uiDisabledItem)
   IF (i MOD linesize) = (pt MOD linesize) OR (i \ linesize) = (pt \ linesize) THEN
    col = uilook(uiMenuItem)
    bg = uilook(uiHighlight)
   END IF
   IF pt = i THEN
    col = uilook(uiSelectedItem + tog)
    bg = 0
   END IF
   IF hover = i THEN
    col = mouse_hover_tinted_color(col)
    bg = mouse_hover_tinted_color(bg)
   END IF
   textcolor col, bg
   printstr CHR(f(i)), offset.x + (i MOD linesize) * 9, offset.y + (i \ linesize) * 9, dpage
  NEXT i

  textcolor uilook(uiMenuItem), 0
  printstr "ASCII " & f(pt), 78, 190, dpage
  FOR i = 2 TO 53
   IF f(pt) = ASC(key2text(2, i)) THEN printstr "ALT+" + UCASE(key2text(0, i)), 178, 190, dpage
   IF f(pt) = ASC(key2text(3, i)) THEN printstr "ALT+SHIFT+" + UCASE(key2text(0, i)), 178, 190, dpage
  NEXT i
  IF f(pt) = 32 THEN printstr "SPACE", 178, 190, dpage

  SWAP vpage, dpage
  setvispage vpage
  dowait
 LOOP
END FUNCTION

'Return initial representation string for percent_cond_grabber
FUNCTION format_percent_cond(cond as AttackElementCondition, default as string, byval decimalplaces as integer = 4) as string
 IF cond.comp = compNone THEN
  RETURN default
 ELSE
  RETURN " " + comp_strings(cond.comp) + " " + format_percent(cond.value, decimalplaces)
 END IF
END FUNCTION

'This will probably only be used for editing AttackElementConditions, but it's more general than that.
'Returns whether cond was edited. If ret_if_repr_changed, also returns true if repr changed.
FUNCTION percent_cond_grabber(byref cond as AttackElementCondition, byref repr as string, default as string, byval min as double, byval max as double, byval decimalplaces as integer = 4, ret_if_repr_changed as bool = YES) as bool
 WITH cond
  DIM intxt as string = getinputtext
  DIM newcomp as CompType = .comp
  DIM oldrepr as string = repr
  DIM ret as bool

  IF keyval(scDelete) > 1 THEN newcomp = compNone

  'Listen for comparison operator input
  IF INSTR(intxt, "<") THEN newcomp = compLt
  IF INSTR(intxt, ">") THEN newcomp = compGt

  IF newcomp <> .comp THEN
   IF .comp = compNone THEN .value = 0
   .comp = newcomp
   repr = format_percent_cond(cond, default, decimalplaces)
   ret = YES
  ELSEIF .comp = compNone THEN
   DIM temp as string = "0%"
   .value = 0
   'typing 0 doesn't change the value or repr, workaround
   IF percent_grabber(.value, temp, min, max, decimalplaces, NO) OR INSTR(intxt, "0") > 0 THEN
    repr = " < " + temp  'Default
    .comp = compLt
    ret = YES
   END IF
  ELSE
   'Trim comparison operator
   repr = MID(repr, 4)
   IF keyval(scBackspace) > 1 ANDALSO repr = "0%" THEN
    repr = default
    .comp = compNone
    ret = YES
   ELSE
    ret OR= percent_grabber(.value, repr, min, max, decimalplaces, NO)
    'Add the operator back
    repr = " " + comp_strings(.comp) + " " + repr
   END IF
  END IF

  IF ret_if_repr_changed THEN ret OR= (repr <> oldrepr)
  RETURN ret
 END WITH
END FUNCTION

SUB percent_cond_editor (cond as AttackElementCondition, byval min as double, byval max as double, byval decimalplaces as integer = 4, do_what as string = "...", percent_of_what as string = "")
 DIM cond_types(2) as CompType = {compNone, compLt, compGt}
 DIM comp_num as CompType
 FOR i as integer = 0 TO 2
  IF cond.comp = cond_types(i) THEN comp_num = i
 NEXT

 DIM menu(2) as string
 menu(0) = "Previous Menu"
 DIM st as MenuState
 st.size = 18
 st.pt = 1

 DIM repr as string = format_percent(cond.value, decimalplaces)

 DO
  setwait 55
  setkeys YES
  IF keyval(ccCancel) > 1 OR enter_space_click(st) THEN EXIT DO
  IF keyval(scF1) > 1 THEN show_help "percent_cond_editor"
  SELECT CASE st.pt
   CASE 1: IF intgrabber(comp_num, 0, 2) THEN cond.comp = cond_types(comp_num)
   CASE 2: percent_grabber(cond.value, repr, min, max, decimalplaces)
  END SELECT

  'Update
  IF cond.comp = compNone THEN menu(1) = "Condition: Never"
  IF cond.comp = compGt THEN menu(1) = "Condition: " + do_what + " when more than..."
  IF cond.comp = compLt THEN menu(1) = "Condition: " + do_what + " when less than..."
  menu(2) = "Threshold: " + repr + percent_of_what
  st.last = IIF(cond.comp = compNone, 1, 2)

  usemenu st

  clearpage vpage
  standardmenu menu(), st, 0, 0, vpage
  setvispage vpage
  dowait
 LOOP
END SUB

'Whether thinggrabber will enter an editor.
FUNCTION enter_or_add_new(state as MenuState) as bool
 RETURN enter_space_click(state) OR keyval(scPlus) > 1 OR keyval(scInsert) > 1
END FUNCTION

'Returns true if the calling menu needs to refresh.
'Edit an object ID numerically (unless intgrab=NO) or by entering an editor.
'See FnEditor for information about the calling convention.
'This handles enter/space/click, +/insert, digits, left/right, - and backspace.
'offset should be 0 or 1, eg:
' offset=0: datum X means attack X
' offset=1: datum 0 is none, X+1 is attack X
'min is the minimum value of datum. Usually equal to offset if there is no
'"none" option, or offset-1 if there is. (Not the same as min for zintgrabber!)
'max_record is the maximum object ID, not the upper range of datum.
'add_new_if_none: pass YES only if Enter/Space/Click already was diverted to ThingBrowser.
LOCAL FUNCTION thinggrabber (byref datum as integer, state as MenuState, offset as integer, min as integer, max_record as integer, intgrab as bool = YES, editor_func as FnEditor, add_new_if_none as bool = NO) as bool
 DIM editor_arg as integer  'What to pass to editor_func.
 IF keyval(scPlus) > 1 OR keyval(scInsert) > 1 THEN
  editor_arg = max_record + 1
 ELSEIF enter_space_click(state) THEN
  ' (Note: this case generally isn't reached, it's handled in attackgrabber, etc,
  ' unless Shift or Ctrl is held)
  editor_arg = datum - offset
  ' If editor_arg < 0, ie initial value is None, then could either go to editor
  ' for record 0 or add new. Shouldn't add new if there's no ThingBrowser to enter.
  IF editor_arg < 0 THEN
   editor_arg = IIF(add_new_if_none, max_record + 1, 0)
  END IF
 ELSE
  ' Check this only after checking scPlus, because intgrabber reads it
  IF intgrab THEN
   IF offset <> 0 AND offset <> 1 THEN showbug "thinggrabber: weird offset " & offset
   IF offset = 0 AND min = -1 ANDALSO (keyval(scDelete) > 1 ORELSE (keyval(scBackspace) > 1 AND datum <= 0)) THEN
    'Special case, intgrabber doesn't know that -1 means None, not 0
    IF datum <> -1 THEN
     datum = -1
     RETURN YES
    END IF
   'min and max for zintgrabber are offset by one: -1 means datum=0
   ELSEIF (offset = 1 ANDALSO zintgrabber(datum, min - 1, max_record)) OR _
          (offset = 0 ANDALSO intgrabber(datum, min, max_record)) THEN
    RETURN YES
   END IF
  END IF
  RETURN NO
 END IF

 DIM newrecord as integer
 newrecord = editor_func(editor_arg)
 IF newrecord = -1 THEN RETURN NO  'Cancelled add-new
 datum = newrecord + offset
 ' Even if the ID hasn't changed you might have edited the data, so need to refresh the menu
 RETURN YES
END FUNCTION

LOCAL FUNCTION want_to_enter_browser(state as MenuState) as bool
 RETURN keyval(scCtrl) = 0 ANDALSO keyval(scShift) = 0 ANDALSO enter_space_click(state)
END FUNCTION

'Edit an attack ID (possibly offset) numerically or by entering the attack editor.
'See thinggrabber.
FUNCTION attackgrabber (byref datum as integer, state as MenuState, offset as integer = 0, min as integer = 0, intgrab as bool = YES) as bool
 IF want_to_enter_browser(state) THEN
  IF offset = 1 THEN
   datum = attack_picker_or_none(datum)
  ELSE
   datum = attack_picker(datum)
  END IF
  RETURN YES
 ELSE
  RETURN thinggrabber(datum, state, offset, min, gen(genMaxAttack), intgrab, @attack_editor, YES)
 END IF
END FUNCTION

'Edit an enemy ID (possibly offset) numerically or by entering the enemy editor.
'See thinggrabber.
FUNCTION enemygrabber (byref datum as integer, state as MenuState, offset as integer = 0, min as integer = 0, intgrab as bool = YES) as bool
 IF want_to_enter_browser(state) THEN
  IF offset = 1 THEN
   datum = enemy_picker_or_none(datum)
  ELSE
   datum = enemy_picker(datum)
  END IF
  RETURN YES
 ELSE
  RETURN thinggrabber(datum, state, offset, min, gen(genMaxEnemy), intgrab, @enemy_editor, YES)
 END IF
END FUNCTION

'Edit a textbox ID (possibly offset) numerically or by entering the textbox editor.
'See thinggrabber.
FUNCTION textboxgrabber (byref datum as integer, state as MenuState, offset as integer = 0, min as integer = 0, intgrab as bool = YES) as bool
 'TODO: textbox 0 is never selectable, but ID 0 is None. So this acts a bit weird.
 IF want_to_enter_browser(state) THEN
  IF offset = 1 THEN
   datum = textbox_picker_or_none(datum)
  ELSE
   datum = textbox_picker(datum)
  END IF
  RETURN YES
 ELSE
  RETURN thinggrabber(datum, state, offset, min, gen(genMaxTextbox), intgrab, @text_box_editor, YES)
 END IF
END FUNCTION

' Shared by ui_color_editor and ui_boxstyle_editor
SUB make_ui_editor_sample_menu(sample_menu as MenuDef, sample_state as MenuState)
 WITH sample_menu
  .alignhoriz = alignRight
  .alignvert = alignTop
  .anchorhoriz = alignRight
  .anchorvert = alignTop
  .offset.x = -8
  .offset.y = 4
 END WITH
 append_menu_item sample_menu, "Sample"
 append_menu_item sample_menu, "Example"
 append_menu_item sample_menu, "Disabled"
 sample_menu.last->disabled = YES
 sample_state.active = YES
 init_menu_state sample_state, sample_menu
END SUB

SUB ui_color_editor(palnum as integer)
 DIM index as integer
 DIM default_colors(uiColorLast) as integer

 load_master_and_uicol palnum
 GuessDefaultUIColors master(), default_colors()

 DIM sample_menu as MenuDef
 DIM sample_state as MenuState
 make_ui_editor_sample_menu sample_menu, sample_state


 DIM color_menu(-1 TO uiColorLast) as string
 make_ui_color_editor_menu color_menu(), uilook()

 DIM state as MenuState
 state.first = -1
 state.top = -1
 state.pt = -1
 state.last = UBOUND(color_menu)
 state.autosize = YES
 state.autosize_ignore_pixels = 12
 DIM menuopts as MenuOptions
 menuopts.scrollbar = YES

 setkeys
 DO
  setwait 55
  setkeys
  IF keyval(ccCancel) > 1 THEN EXIT DO
  IF keyval(scF1) > 1 THEN show_help "ui_color_editor"
  IF usemenu(state) THEN
   IF uilook(uiShadow) = 0 THEN
    'This is a hack. Unfortunately ellipse slice border and fill colors can't be 0 as that
    'counts as transparent. This is a design mistake in ellipse slices, but is too much trouble to fix
    uilook(uiShadow) = nearcolor(master(), 0, 1)
    state.need_update = YES
   END IF
  END IF
  mouse_update_hover sample_state

  index = state.pt

  IF enter_space_click(state) THEN
   IF state.pt = -1 THEN
    EXIT DO
   ELSE
    'Color browser
    uilook(index) = color_browser_256(uilook(index))
    state.need_update = YES
   END IF
  END IF

  IF index >= 0 THEN
   state.need_update OR= intgrabber(uilook(index), 0, 255)

   IF keyval(scCtrl) > 0 AND keyval(scD) > 1 THEN ' Ctrl+D
    uilook(index) = default_colors(index)
    state.need_update = YES
   END IF
  END IF

  IF state.need_update THEN
   state.need_update = NO
   make_ui_color_editor_menu color_menu(), uilook()
   SaveUIColors uilook(), boxlook(), palnum
  END IF

  '--update sample according to what you have highlighted
  DIM draw_sample as bool = NO
  sample_state.pt = 0
  SELECT CASE index
   CASE uiMenuItem, uiDisabledItem, uiSelectedItem, uiSelectedItem2, uiOutline, uiMouseHoverItem
    draw_sample = YES
   CASE uiSelectedDisabled, uiSelectedDisabled2
    sample_state.pt = 2
    draw_sample = YES
  END SELECT

  '--draw screen
  clearpage dpage
  IF draw_sample THEN draw_menu sample_menu, sample_state, dpage
  standardmenu color_menu(), state, 10, 0, dpage, menuopts
  FOR i as integer = large(state.top, 0) TO small(state.top + state.size, state.last)
   rectangle 0, 8 * (i - state.top), 8, 8, uilook(i), dpage
  NEXT i
  DIM msg as string = "Ctrl+D to revert to default"
  edgeprint msg, pCentered, pBottom, uilook(uiText), dpage

  SWAP vpage, dpage
  setvispage vpage
  dowait
 LOOP
END SUB

SUB make_ui_color_editor_menu(m() as string, colors() as integer)
 m(-1) = "Previous Menu"
 FOR i as integer = 0 TO uiColorLast
  m(i) = UiColorCaption(i) & ": " & colors(i)
 NEXT i
END SUB

CONST NUM_BOXSTYLE_OPTIONS = 3

SUB ui_boxstyle_editor(palnum as integer)
 DIM index as integer
 DIM kind as integer
 DIM default_boxes(uiBoxLast) as BoxStyle

 load_master_and_uicol palnum
 GuessDefaultBoxStyles master(), default_boxes()

 DIM sample_menu as MenuDef
 DIM sample_state as MenuState
 make_ui_editor_sample_menu sample_menu, sample_state

 DIM color_menu(-1 TO (uiBoxLast + 1) * NUM_BOXSTYLE_OPTIONS - 1) as string
 make_ui_boxstyle_editor_menu color_menu(), boxlook()

 DIM state as MenuState
 state.top = -1
 state.pt = -1
 state.first = -1
 state.last = UBOUND(color_menu)
 state.autosize = YES
 state.autosize_ignore_pixels = 12
 DIM menuopts as MenuOptions
 menuopts.scrollbar = YES

 setkeys
 DO
  setwait 55
  setkeys
  IF keyval(ccCancel) > 1 THEN EXIT DO
  IF keyval(scF1) > 1 THEN show_help "ui_boxstyle_editor"
  usemenu state
  mouse_update_hover sample_state

  index = state.pt \ NUM_BOXSTYLE_OPTIONS
  kind = state.pt MOD NUM_BOXSTYLE_OPTIONS ' 0=bgcol, 1=edgecol, 2=border

  WITH boxlook(index)

   IF enter_space_click(state) THEN
    IF state.pt = -1 THEN
     EXIT DO
    ELSEIF kind = 0 THEN
     'Color browser for bgcol
     .bgcol = color_browser_256(.bgcol)
    ELSEIF kind = 1 THEN
     'Color browser for edgecol
     .edgecol = color_browser_256(.edgecol)
    ELSEIF kind = 2 THEN
     'Box border browser
     DIM boxborderb as BoxborderSpriteBrowser
     .border = boxborderb.browse(.border - 1, YES) + 1
    END IF
    state.need_update = YES
   END IF

   IF state.pt >= 0 THEN
    SELECT CASE kind
     CASE 0:
      state.need_update OR= intgrabber(.bgcol, 0, 255)
     CASE 1:
      state.need_update OR= intgrabber(.edgecol, 0, 255)
     CASE 2:
      state.need_update OR= zintgrabber(.border, -1, gen(genMaxBoxBorder))
    END SELECT

    IF keyval(scCtrl) > 0 ANDALSO keyval(scD) > 1 THEN ' Ctrl+D
     SELECT CASE kind
      CASE 0: .bgcol = default_boxes(index).bgcol
      CASE 1: .edgecol = default_boxes(index).edgecol
      CASE 2: .border = default_boxes(index).border
     END SELECT
     state.need_update = YES
    END IF
   END IF

  END WITH

  '--update sample according to what you have highlighted
  sample_menu.boxstyle = 0
  sample_state.pt = 0
  IF index >= 0 THEN
   sample_menu.boxstyle = index
  END IF

  IF state.need_update THEN
   state.need_update = NO
   make_ui_boxstyle_editor_menu color_menu(), boxlook()
   SaveUIColors uilook(), boxlook(), palnum
  END IF

  '--draw screen
  clearpage dpage
  IF state.pt >= 0 THEN draw_menu sample_menu, sample_state, dpage
  standardmenu color_menu(), state, 10, 0, dpage, menuopts
  FOR i as integer = large(state.top, 0) TO small(state.top + state.size, state.last)
   WITH boxlook(i \ NUM_BOXSTYLE_OPTIONS)
    DIM itemtype as integer = i MOD NUM_BOXSTYLE_OPTIONS
    IF itemtype = 0 THEN
     rectangle 0, 8 * (i - state.top), 8, 8, .bgcol, dpage
    ELSEIF itemtype = 1 THEN
     rectangle 0, 8 * (i - state.top), 8, 8, .edgecol, dpage
    END IF
   END WITH
  NEXT i
  DIM msg as string = "Ctrl+D to revert to default"
  edgeprint msg, pCentered, pBottom, uilook(uiText), dpage

  SWAP vpage, dpage
  setvispage vpage
  dowait
 LOOP
END SUB

SUB make_ui_boxstyle_editor_menu(m() as string, boxes() as BoxStyle)
 m(-1) = "Previous Menu"
 FOR i as integer = 0 TO uiBoxLast
  WITH boxes(i)
   DIM off as integer = i * NUM_BOXSTYLE_OPTIONS
   m(off) = "Box style " & i & " color:  " & .bgcol
   m(off + 1) = "Box style " & i & " edge: " & .edgecol
   m(off + 2) = "Box style " & i & " border image: " & defaultint(.border - 1, "none", -1)
  END WITH
 NEXT i
END SUB

'==========================================================================================

FUNCTION RecordPreviewer.getname() as string
 RETURN ""
END FUNCTION

'Ask how to add a new record to an editor.
'what:     Type of a record, like "map"
'maxindex: Max valid ID of an existing record
'getname:  Returns the name or description of a record, or NULL. Alternative to implementing
'          previewer->getname() method, if you already have a function to get the name
'Return value:
' -2  =Cancel
' -1  =New blank
' >=0 =Copy existing
'TODO: this is duplicated in a number of places. Search for 'generic_add_new'
FUNCTION generic_add_new (what as string, maxindex as integer, getname as FnRecordName = NULL, previewer as RecordPreviewer ptr = NULL, helpkey as string = "") as integer
 DIM menu(2) as string
 DIM whichtocopy as integer = 0
 DIM state as MenuState
 state.last = UBOUND(menu)
 state.size = 24
 DIM menuopts as MenuOptions
 menuopts.edged = YES
 menuopts.drawbg = YES

 state.need_update = YES
 setkeys YES
 DO
  setwait 55
  setkeys YES
  IF keyval(ccCancel) > 1 THEN
   '--return cancel
   RETURN -2
  END IF
  IF keyval(scF1) > 1 THEN show_help helpkey
  usemenu state
  IF UpdateScreenSlice() THEN state.need_update = YES  'Regenerate preview on window resize
  IF state.pt = 2 THEN
   IF intgrabber(whichtocopy, 0, maxindex) THEN state.need_update = YES
  END IF
  IF enter_space_click(state) THEN
   SELECT CASE state.pt
   CASE 0 ' cancel
    RETURN -2
   CASE 1 ' blank
    RETURN -1
   CASE 2 ' copy
    RETURN whichtocopy
   END SELECT
  END IF
  IF state.need_update THEN
   state.need_update = NO
   IF previewer THEN previewer->update(whichtocopy)
   DIM name as string
   name = IIF(getname, getname(whichtocopy), previewer->getname)
   menu(0) = "Cancel"
   menu(1) = "New blank " & what
   menu(2) = "Copy of " & what & " " & whichtocopy & " " & name
  END IF
  clearpage vpage
  IF previewer ANDALSO state.pt = 2 THEN previewer->draw(pRight, pBottom, vpage)
  edgeprint "Adding new " & what, pCentered, 4, uilook(uiMenuItem), vpage
  standardmenu menu(), state, 20, 16, vpage, menuopts

  setvispage vpage
  dowait
 LOOP
END FUNCTION


FUNCTION needaddset (byref pt as integer, byref check as integer, what as string) as bool
 IF pt <= check THEN RETURN NO
 IF yesno("Add new " & what & "?") THEN
  check += 1
  RETURN YES
 ELSE
  pt -= 1
 END IF
 RETURN NO
END FUNCTION

'This is intgrabber, and if the 'more' key is pressed when pt=max, asks whether to
'add a new set. DOES NOT INCREMENT max. Check whether pt > max to see whether this
'needs to be handled.
'maxmax is max value of max, of course
FUNCTION intgrabber_with_addset(byref pt as integer, byval min as integer, byval max as integer, byval maxmax as integer=32767, what as string, byval less as KBScancode=ccLeft, byval more as KBScancode=ccRight) as bool
 IF keyval(more) > 1 AND pt = max AND max < maxmax THEN
  IF yesno("Add new " & what & "?") THEN
   pt += 1
   RETURN YES
  END IF
  RETURN NO
 ELSE
  IF less = ccUp ANDALSO more = ccDown THEN
   'special case to work around a strange bug in mac os x sprite brows menu arrow key handling
   RETURN intgrabber(pt, min, max, scComma, scPeriod, NO, NO)
  ELSE
   RETURN intgrabber(pt, min, max, less, more, NO, NO)
  END IF 
 END IF
END FUNCTION

FUNCTION load_vehicle_name(vehID as integer) as string
 IF vehID < 0 OR vehID > gen(genMaxVehicle) THEN RETURN ""
 DIM vehicle as VehicleData
 LoadVehicle game + ".veh", vehicle, vehID
 RETURN vehicle.name
END FUNCTION

FUNCTION load_item_name (it as integer, hidden as integer, offbyone as integer) as string
 'it - the item number
 'hidden - whether to *not* prefix the item number
 'offbyone - whether it is the item number (1), or the itemnumber + 1 (0)
 IF it <= 0 AND offbyone = NO THEN RETURN "NONE"
 DIM itn as integer
 IF offbyone THEN itn = it ELSE itn = it - 1
 DIM result as string = readitemname(itn)
 IF hidden = 0 THEN result = itn & " " & result
 RETURN result
END FUNCTION

' Toggle tagnum between 0 and an unused onetime tag ID (2 to max_onetime)
' This only checks NPC definitions that have already been written
' to disk, so that should be done so before calling
SUB onetimetog(byref tagnum as integer)
 IF tagnum > 0 THEN
  tagnum = 0
  EXIT SUB
 END IF
 DIM onetimeusage(max_onetime \ 16) as integer
 check_used_onetime_npcs onetimeusage()  'Marks bits 0 and 1 as used
 DIM tried as integer = 0
 DIM i as integer = gen(genOneTimeNPC)
 DO
  IF i > max_onetime THEN i = 2
  IF readbit(onetimeusage(), 0, i) = NO THEN EXIT DO
  IF tried = max_onetime THEN
   visible_debug "All onetime usage tags have been used up! Do you really have 16000+ NPCs? This is probably an engine bug!"
   tagnum = 0
   EXIT SUB
  END IF
  i += 1
  tried += 1
 LOOP
 tagnum = i
 gen(genOneTimeNPC) = i
END SUB

LOCAL SUB pal16browse_draw_spriteset(sprite as Frame ptr, pal as Palette16 ptr, x as integer, y as integer, page as integer)
 IF sprite = NULL THEN EXIT SUB
 y -= sprite->h \ 2 - 10
 FOR framenum as integer = 0 TO sprite->arraylen - 1
  frame_draw sprite + framenum, pal, x, y, , page
  x += (sprite + framenum)->w
 NEXT
END SUB

'Browse for a 16-color palette
'picnum may be -1
FUNCTION pal16browse (curpal as integer, picset as SpriteType, picnum as integer, show_default as bool=NO) as integer
 DIM sprite as Frame ptr
 IF picnum >= 0 THEN sprite = frame_load(picset, picnum)
 DIM ret as integer = pal16browse(curpal, sprite, show_default)
 frame_unload @sprite
 RETURN ret
END FUNCTION

'Browse for a 16-color palette
'sprite may be NULL
FUNCTION pal16browse (curpal as integer, sprite as Frame ptr, show_default as bool=NO) as integer
 DIM buf(7) as integer
 REDIM pal16(100) as Palette16 ptr  'At most 100 palettes visible on-screen

 DIM as integer i, j

 DIM state as MenuState
 state.need_update = YES
 state.top = curpal - 1
 state.first = -1
 state.size = 9
 state.spacing = 20
 state.autosize = YES
 
 IF show_default THEN
  state.first = -2
 END IF
 
 DIM stateOpts as MenuOptions
 stateOpts.itemspacing = 12

 '--Find last palette which is not blank
 loadrecord buf(), game + ".pal", 8, 0
 FOR i = buf(1) TO 0 STEP -1
  state.last = i
  loadrecord buf(), game + ".pal", 8, 1 + i
  FOR j = 0 TO 7
   IF buf(j) <> 0 THEN EXIT FOR, FOR
  NEXT j
 NEXT i

 'We actually want to be able to browse past the last palette to the first empty palette
 state.last += 1

 state.pt = bound(curpal, IIF(show_default, -1, 0), state.last)
 correct_menu_state state

 DIM last_size as integer = state.size

 STATIC pal_clipboard as Palette16 ptr

 DIM prev_mouse_vis as CursorVisibility = getcursorvisibility()
 showmousecursor
 setkeys
 DO
  setwait 55
  setkeys
  state.tog = state.tog XOR 1
  IF keyval(ccCancel) > 1 THEN EXIT DO
  IF keyval(scF1) > 1 THEN show_help "pal16browse"

  recalc_menu_size state
  calc_menustate_size state, stateOpts, 0, 0, dpage
  state.size = small(state.size, 100)
  IF state.size <> last_size THEN state.need_update = YES
  last_size = state.size

  IF usemenu(state) THEN state.need_update = YES

  'Copy/paste palette
  'Allow Alt+C/V as well as Ctrl+C/V because Alt+C/V copy-pastes the palette
  'in the sprite editor
  IF keyval(scAlt) > 0 ORELSE keyval(scCtrl) > 0 THEN
   DIM palidx as integer = state.pt - state.top   'Index in pal16
   IF state.pt >= 0 ANDALSO palidx <= UBOUND(pal16) ANDALSO pal16(palidx) THEN
    IF keyval(scC) > 1 THEN  'Ctrl-C copy
     palette16_unload @pal_clipboard
     pal_clipboard = palette16_duplicate(pal16(palidx))
    END IF
    IF keyval(scV) > 1 THEN  'Ctrl-V paste
     IF pal_clipboard THEN
      palette16_unload @pal16(palidx)
      pal16(palidx) = palette16_duplicate(pal_clipboard)
      palette16_save pal16(palidx), state.pt
     END IF
    END IF
   END IF
  END IF

  DIM temppt as integer = large(state.pt, 0)
  IF intgrabber(temppt, 0, state.last, , , , NO) THEN  'use_clipboard=NO
   state.pt = temppt
   correct_menu_state state
   state.need_update = YES
  END IF
  IF enter_space_click(state) THEN
   IF state.pt > state.first THEN curpal = state.pt
   EXIT DO
  END IF

  IF state.need_update THEN
   state.need_update = NO
   FOR i = 0 TO state.size
    palette16_unload @pal16(i)
    IF state.top + i <= gen(genMaxPal) THEN pal16(i) = palette16_load(state.top + i)
   NEXT i
  END IF

  '--Draw screen
  clearpage dpage
  FOR i = 0 TO state.size
   DIM sloty as integer = i * 20
   DIM cur_slot as integer = state.top + i
   IF cur_slot > state.last THEN CONTINUE FOR
   textcolor uilook(uiMenuItem), 0
   IF cur_slot = state.hover THEN textcolor uilook(uiMouseHoverItem), 0
   IF cur_slot = state.pt THEN textcolor uilook(uiSelectedItem + state.tog), 0
   SELECT CASE cur_slot
    CASE state.first 'Might be -1 or -2 depending on whether default is displayed
     printstr "Cancel", 4, 5 + sloty, dpage
    CASE -1
     printstr "Default", 4, 5 + sloty, dpage
    CASE IS >= 0
     DIM txtwidth as integer = 8 + large(16, textwidth(STR(cur_slot)))
     DIM border_col as integer
     IF cur_slot = state.hover THEN border_col = uilook(uiMouseHoverItem)
     IF cur_slot = state.pt THEN border_col = uilook(uiMenuitem)
     edgebox txtwidth - 1, 1 + sloty, 114, 18, uilook(uiBackground), border_col, dpage
     FOR j = 0 TO 15
      IF pal16(i) THEN
       DIM c as integer = pal16(i)->col(j)
       rectangle txtwidth + j * 7, 2 + sloty, 5, 16, c, dpage
      END IF
     NEXT j
     IF cur_slot <> state.pt THEN
      IF pal16(i) THEN
       pal16browse_draw_spriteset sprite, pal16(i), txtwidth + 150, sloty, dpage
      END IF
     END IF
     printstr STR(cur_slot), 4, 5 + sloty, dpage
   END SELECT
  NEXT i
  IF state.pt >= 0 THEN '--draw the selected spriteset last, on top of all others
   i = state.pt - state.top
   DIM sloty as integer = i * 20
   DIM txtwidth as integer = 8 + large(16, textwidth(STR(state.pt)))
   IF pal16(i) THEN
    pal16browse_draw_spriteset sprite, pal16(i), txtwidth + 125, sloty, dpage
   END IF
  END IF

  SWAP vpage, dpage
  setvispage vpage
  dowait
 LOOP
 setcursorvisibility(prev_mouse_vis)
 setkeys

 FOR i = 0 TO 100
  palette16_unload @pal16(i)
 NEXT
 RETURN curpal
END FUNCTION

' Number of steps before a random formation triggers
FUNCTION formset_step_estimate(freq as integer, suffix as string=" steps") as string
 IF freq = 0 THEN RETURN "never"
 ' Round upwards to get the actual number steps required
 ' gam.random_battle_countdown initialised to range(100, 60), which is 40-160.
 DIM low_est  as integer = (40 + freq - 1) \ freq
 DIM high_est as integer = (160 + freq - 1) \ freq
 ' This average is just an estimate. Add 0.5 due to the rounding-up behaviour.
 DIM average as double = 100 / freq + 0.5
 RETURN low_est & "-" & high_est & suffix & ", avg~" & format(average, "0.0")
END FUNCTION

'Average chance to trigger a formation set on each step
FUNCTION formset_freq_estimate(freq as integer) as double
 IF freq = 0 THEN RETURN 0.
 DIM average_steps as double = 100 / freq + 0.5  'See formset_step_estimate
 RETURN 1. / average_steps
END FUNCTION

'Explanation for a hero/enemy's speed stat. Only applies to active-time mode
FUNCTION speed_estimate(speed as integer) as string
 IF speed = 0 THEN RETURN "never gets a turn"
 DIM ticks as integer = CEIL(1000 / speed)
 DIM result as string = strprintf("%.3g", ticks / ideal_ticks_per_second())
 RETURN "1 turn every " & result & " sec"
END FUNCTION

FUNCTION seconds_estimate(ticks as integer) as string
 IF ticks = 0 THEN RETURN "0"
 RETURN strprintf("%.2f", ticks / ideal_ticks_per_second())
END FUNCTION

'Return a caption shown in hero and enemy editors while editing a stat.
FUNCTION stat_value_caption(statnum as integer, statval as integer) as string
 IF statnum = statSpeed ANDALSO gen(genBattleMode) = 0 THEN  'Active-time
  RETURN speed_estimate(statval)
 ELSEIF statnum = statFocus ANDALSO prefbit(52) = NO THEN  '"Ignore MP~ stat"
  RETURN "Attacks cost " & (100 - statval) & "% normal MP cost"
 ELSEIF statnum = statHitX ANDALSO prefbit(29) = NO THEN  '"Ignore extra Hits
  'stat" Total number of hits is capped to 20. Increasing Hits above 20 will
  'continue to increase the average number of hits, but we don't show that.
  RETURN "Attacks hit 0 to " & small(19, statval) & " extra times"
 ELSEIF statnum >= statCtr THEN  'Ctr, possible Hits and Focus (MP~)
  RETURN "Free stat for any use"
 END IF
END FUNCTION

SUB load_text_box_portrait (byref box as TextBox, byref gfx as GraphicPair)
 'NOTE: Compare this to the portrait loading code in game.bas:init_text_box_slices()
 'If you update this here, you might need to update that one too!
 DIM img_id as integer = -1
 DIM pal_id as integer = -1
 DIM her as HeroDef
 unload_sprite_and_pal gfx
 WITH gfx
  SELECT CASE box.portrait_type
   CASE portraitSPRITESET
    img_id = box.portrait_id
    pal_id = box.portrait_pal
   CASE portraitPARTYRANK
    'In custom, no party exists, so preview using the first hero
    loadherodata her, 0
    img_id = her.portrait
    pal_id = her.portrait_pal
   CASE portraitPARTYSLOT
    'In custom, no party exists, so preview using the first hero
    loadherodata her, 0
    img_id = her.portrait
    pal_id = her.portrait_pal
   CASE portraitHEROID
    loadherodata her, box.portrait_id
    img_id = her.portrait
    pal_id = her.portrait_pal
  END SELECT
  IF img_id >= 0 THEN
   load_sprite_and_pal gfx, sprTypePortrait, img_id, pal_id
  END IF
 END WITH
END SUB

SUB draw_crosshairs(pos as XYPair, length as integer = 1, zoom as integer = 1, col as integer, page as integer)
  rectangle pos.x - length * zoom, pos.y, length * zoom, zoom, col, page
  rectangle pos.x + zoom, pos.y, length * zoom, zoom, col, page
  rectangle pos.x, pos.y - length * zoom, zoom, length * zoom, col, page
  rectangle pos.x, pos.y + zoom, zoom, length * zoom, col, page
END SUB

'Editor for an x/y position.
'Note that this does not center or scale the slice, unlike xy_position_on_sprite
'UNUSED
SUB xy_position_on_slice (sl as Slice Ptr, byref x as integer, byref y as integer, caption as string, helpkey as string)
 DIM col as integer
 DIM tog as integer
 DIM root as Slice Ptr
 
 setkeys
 DO
  setwait 55
  setkeys
  tog = tog XOR 1

  IF keyval(ccCancel) > 1 THEN EXIT DO
  IF keyval(scF1) > 1 THEN show_help helpkey
  IF enter_or_space() THEN EXIT DO
  IF keyval(ccLeft) > 0  THEN x -= 1
  IF keyval(ccRight) > 0 THEN x += 1
  IF keyval(ccUp) > 0    THEN y -= 1
  IF keyval(ccDown) > 0  THEN y += 1
  DIM dragging as bool = readmouse.drag_dist > 3
  IF readmouse.buttons AND mouseRight ORELSE dragging THEN
   DIM temp as XYPair = readmouse.pos - sl->ScreenPos
   x = temp.x
   y = temp.y
  END IF
  IF enter_or_space() ORELSE (readmouse.release AND mouseLeft ANDALSO dragging = NO) THEN EXIT DO

  clearpage dpage
  DrawSlice sl, dpage
  col = uilook(uiBackground)
  IF tog = 0 THEN col = uilook(uiSelectedItem)
  draw_crosshairs sl->ScreenPos + XY(x, y), 1, 1, col, dpage

  wrapprint caption, pCentered, 0, uilook(uiText), dpage
  edgeprint "Position point and press Enter, Space, or Click", 0, pBottom, uilook(uiText), dpage
  edgeprint XY(x, y), 0, pBottom - 10, uilook(uiText), dpage

  SWAP vpage, dpage
  setvispage vpage
  dowait
 LOOP
END SUB

'xy_position_on_sprite is a bit nicer than xy_position_on_slice, so this wrapper lets you use
'the former with a sprite slice
SUB xy_position_on_sprite_slice (sl as Slice Ptr, byref x as integer, byref y as integer, caption as string, helpkey as string)
 BUG_IF(sl->SliceType <> slSprite, "expected sprite slice")
 WITH *sl->SpriteData
  IF .img.sprite THEN
   xy_position_on_sprite .img, x, y, .frame, caption, helpkey
  END IF
 END WITH
END SUB

SUB xy_position_on_sprite (spr as GraphicPair, byref x as integer, byref y as integer, byval frame as integer, caption as string, helpkey as string)
 DIM col as integer
 DIM tog as integer
 DIM fr as Frame ptr = spr.sprite + frame

 setkeys
 DO
  setwait 55
  setkeys
  tog = tog XOR 1

  'Draw the sprite at 2x zoom unless that won't fit on-screen
  DIM zoom as integer = 1
  IF fr->size * 2 < get_resolution() - XY(5, 30) THEN zoom = 2
  DIM topleft as XYPair
  topleft = (get_resolution() - fr->size * zoom) \ 2

  IF keyval(ccCancel) > 1 THEN EXIT DO
  IF keyval(scF1) > 1 THEN show_help helpkey
  DIM speed as integer = IIF(keyval(scShift), 4, 1)
  IF slowkey(ccLeft, 100)  THEN x -= speed
  IF slowkey(ccRight, 100) THEN x += speed
  IF slowkey(ccUp, 100)    THEN y -= speed
  IF slowkey(ccDown, 100)  THEN y += speed
  DIM dragging as bool = readmouse.drag_dist > 3
  IF readmouse.buttons AND mouseRight ORELSE dragging THEN
   DIM temp as XYPair
   temp = (readmouse.pos - topleft) \ zoom
   x = temp.x
   y = temp.y
  END IF
  IF enter_or_space() ORELSE (readmouse.release AND mouseLeft ANDALSO dragging = NO) THEN EXIT DO

  clearpage dpage
  drawbox topleft.x - 1, topleft.y - 1, fr->w * zoom + 2, fr->h * zoom + 2, uilook(uiSelectedDisabled), 1, dpage
  frame_draw fr, spr.pal, topleft.x, topleft.y, , dpage, DrawOptions(zoom)
  col = uilook(uiBackground)
  IF tog = 0 THEN col = uilook(uiSelectedItem)
  draw_crosshairs topleft + XY(x, y) * zoom, 1, zoom, col, dpage

  wrapprint caption, pCentered, 0, uilook(uiText), dpage
  wrapprint XY(x, y) & !"  Shift for speed\nPosition point and press Enter, Space, or Click", 0, pBottom, uilook(uiText), dpage

  SWAP vpage, dpage
  setvispage vpage
  dowait
 LOOP
END SUB

'Returns  "prefix ABS(n) suffix [AUTOSET] (<tagname or zero/one/negonecap>)"
'where everything except the ABS(n) is optional.
LOCAL FUNCTION base_tag_caption(byval n as integer, prefix as string, suffix as string, zerocap as string, onecap as string, negonecap as string, byval allowspecial as bool) as string
 DIM ret as string
 ret = prefix
 IF LEN(ret) > 0 THEN ret &= " "
 ret &= ABS(n) & suffix
 IF allowspecial <> YES ANDALSO tag_is_autoset(n) THEN ret &= " [AUTOSET]"

 'Append " ($cap)"
 DIM cap as string
 cap = load_tag_name(n)
 IF n = 0 AND LEN(zerocap) > 0 THEN cap = zerocap
 IF n = 1 AND LEN(onecap) > 0 THEN cap = onecap
 IF n = -1 AND LEN(negonecap) > 0 THEN cap = negonecap
 cap = TRIM(cap)
 IF LEN(cap) > 0 THEN ret &= " (" & cap & ")"

 RETURN ret
END FUNCTION

FUNCTION tag_toggle_caption(byval n as integer, prefix as string="Toggle tag", byval allowspecial as bool=NO) as string
 RETURN base_tag_caption(n, prefix, "", "N/A", "Unchangeable", "Unchangeable", allowspecial)
END FUNCTION

FUNCTION tag_choice_caption(byval n as integer, prefix as string="", byval allowspecial as bool=NO) as string
 RETURN base_tag_caption(n, prefix, "", "None", "Unchangeable", "Unchangeable", allowspecial)
END FUNCTION

FUNCTION tag_set_caption(byval n as integer, prefix as string="Set Tag", byval allowspecial as bool=NO) as string
 RETURN base_tag_caption(n, prefix, "=" & onoroff(n), "No tag set", "Unchangeable", "Unchangeable", allowspecial)
END FUNCTION

' Note that this similar to textbox_condition[_short]_caption and describe_tag_condition. Sorry!
FUNCTION tag_condition_caption(byval n as integer, prefix as string="Tag", zerocap as string, onecap as string="Never", negonecap as string="Always") as string
 RETURN base_tag_caption(n, prefix, "=" & onoroff(n), zerocap, onecap, negonecap, YES)
END FUNCTION

'Describe a condition which checks two tags (both conditions need to pass)
'zerovalue: meaning of 0. true is always, false is never
FUNCTION describe_two_tag_condition(prefix as string, truetext as string, falsetext as string, byval zerovalue as bool, byval tag1 as integer, byval tag2 as integer) as string
  DIM ret as string = prefix
  DIM true_count as integer
  DIM false_count as integer
  IF tag1 = 0 THEN tag1 = IIF(zerovalue, -1, 1)
  IF tag2 = 0 THEN tag2 = IIF(zerovalue, -1, 1)
  IF tag1 = 1 THEN
   false_count += 1
  ELSEIF tag1 = -1 THEN
   true_count += 1
  ELSE
   ret &= " tag " & ABS(tag1) & " = " & onoroff(tag1)
  END IF
  IF tag2 = 1 THEN
   false_count += 1
  ELSEIF tag2 = -1 THEN
   true_count += 1
  ELSE
   IF true_count = 0 AND false_count = 0 THEN ret &= " and"
   ret &= " tag " & ABS(tag2) & " = " & onoroff(tag2)
  END IF
  
  IF true_count = 2 THEN ret = truetext
  IF false_count > 0 THEN ret = falsetext
  RETURN ret
END FUNCTION

FUNCTION sublist (s() as string, helpkey as string="", byval x as integer=0, byval y as integer=0, byval page as integer=-1) as integer
 DIM state as MenuState
 state.pt = 0
 state.last = UBOUND(s)
 state.size = 22

 DIM holdscreen as integer
 holdscreen = allocatepage
 IF page > -1 THEN
  copypage page, holdscreen
 ELSE
  clearpage holdscreen
 END IF

 setkeys YES
 DO
  setwait 55
  setkeys YES
  usemenu state
  IF keyval(ccCancel) > 1 THEN
   sublist = -1
   EXIT DO
  END IF
  IF keyval(scF1) > 1 AND helpkey <> "" THEN show_help helpkey
  IF enter_space_click(state) THEN
   sublist = state.pt
   EXIT DO
  END IF
  copypage holdscreen, vpage
  standardmenu s(), state, x, y, vpage
  setvispage vpage
  dowait
 LOOP
END FUNCTION

SUB update_attack_editor_for_chain (byval mode as integer, byref caption1 as string, byref max1 as integer, byref min1 as integer, byref menutype1 as integer, byref caption2 as string, byref max2 as integer, byref min2 as integer, byref menutype2 as integer, rate as integer, stat as integer)
 SELECT CASE mode
  CASE 0 '--no special condition
   'Set limits to maximally permissive to preserve existing values
   caption1 = ""
   max1 = 32767
   min1 = -32768
   menutype1 = 18'skipper
   caption2 = ""
   max2 = 32767
   min2 = -32768
   menutype2 = 18'skipper
  CASE 1 '--tagcheck
   caption1 = "    if Tag:"
   max1 = max_tag()
   min1 = -max_tag()
   menutype1 = 2
   caption2 = "    and Tag:"
   max2 = max_tag()
   min2 = -max_tag()
   menutype2 = 2
  CASE 2 TO 19 ' stat checks
   SELECT CASE mode
    CASE 2 TO 5, 16: caption1 = "    if attacker"
    CASE 6 TO 9: caption1 = "    if any target's"
    CASE 10 TO 15: caption1 = "    if all targets'"
    CASE 17: caption1 = "    Stat: attacker's"
    CASE 18: caption1 = "    Stat: max any target's"
    CASE 19: caption1 = "    Stat: min all targets'"
   END SELECT
   max1 = 15
   min1 = 0
   menutype1 = 16 'stat
   SELECT CASE mode
    CASE 2,6,10
     caption2 = "    is >"
     max2 = 32767
     min2 = -32767
     menutype2 = 0
    CASE 3,7,11
     caption2 = "    is <"
     max2 = 32767
     min2 = -32767
     menutype2 = 0
    CASE 4,8,12
     caption2 = "    is >"
     max2 = 32767
     min2 = 0
     menutype2 = 17 'int%
    CASE 5,9,13
     caption2 = "    is <"
     max2 = 32767
     min2 = 0
     menutype2 = 17 'int%
    CASE 14
     caption2 = "    is > attacker"
     max2 = 15
     min2 = 0
     menutype2 = 16 ' stat
    CASE 15
     caption2 = "    is < attacker"
     max2 = 15
     min2 = 0
     menutype2 = 16 ' stat
    CASE 16
     caption2 = "    is < attacker"
     max2 = 15
     min2 = 0
     menutype2 = 16 ' stat
    CASE 17, 18, 19
     'DIM statname as string = LEFT(battle_statnames(stat), 8)
     'caption2 = "    from 0% at " & statname & "=0 to " & rate & "% at " & statname & " >="
     caption2 = "    from 0% at stat=0 to " & rate & "% at stat>=$$"
     max2 = 32767
     min2 = 1
     menutype2 = 0
   END SELECT
 END SELECT
END SUB

FUNCTION attack_chain_browser (byval start_attack as integer) as integer
 DIM state as AttackChainBrowserState
 DIM selected as integer = start_attack

 v_new state.chainfrom
 v_new state.chainto

 DO
  '--Init

  state.root = NewSliceOfType(slContainer)
  state.root->Fill = YES

  state.lbox = NewSliceOfType(slLayout, state.root)
  state.lbox->Width = 80
  state.lbox->LayoutData->secondary_padding = 6

  state.rbox = NewSliceOfType(slLayout, state.root)
  state.rbox->Width = 80
  state.rbox->AlignHoriz = 2
  state.rbox->AnchorHoriz = 2
  state.rbox->LayoutData->secondary_padding = 6

  init_attack_chain_screen selected, state

  state.column = 1
  state.refresh = YES
  state.focused = state.current

  state.before.pt = 0
  state.before.top = 0
  state.after.pt = 0
  state.after.top = 0
 
  setkeys
  DO
   setwait 55
   setkeys

   'TODO: switch to a plankmenu & scroll slice instead
   state.before.size = large(1, (vpages(vpage)->h + 6) \ 56) - 1
   state.after.size = state.before.size

   IF keyval(ccCancel) > 1 THEN
    state.done = YES
    EXIT DO
   END IF
   IF keyval(scF1) > 1 THEN show_help "attack_chain_browse"
   IF keyval(scF6) > 1 THEN slice_editor state.root, SL_COLLECT_EDITOR

   IF enter_or_space() THEN
    IF state.focused <> 0 THEN
     IF state.focused->extra(0) >= 0 THEN  '"(None)" isn't selected
      IF state.column = 1 THEN state.done = YES
      selected = state.focused->extra(0)
      EXIT DO
     END IF
    END IF
   END IF

   IF keyval(ccLeft) > 1 THEN loopvar(state.column, 0, 2, -1) : state.refresh = YES
   IF keyval(ccRight) > 1 THEN loopvar(state.column, 0, 2, 1) : state.refresh = YES
   SELECT CASE state.column
    CASE 0: IF usemenu(state.before) THEN state.refresh = YES
    CASE 1: 
    CASE 2: IF usemenu(state.after) THEN state.refresh = YES
   END SELECT
   
   IF state.refresh THEN
    state.refresh = NO
    attack_preview_slice_defocus state.focused
    state.focused = NULL
    SELECT CASE state.column
     CASE 0:
      IF state.before.pt >= 0 THEN state.focused = state.chainfrom[state.before.pt]
     CASE 1:
      state.focused = state.current
     CASE 2:
      IF state.after.pt >= 0 THEN state.focused = state.chainto[state.after.pt]
    END SELECT
    attack_preview_slice_focus state.focused
    state.lbox->Y = state.before.top * -56
   END IF
 
   clearpage dpage
   DrawSlice state.root, dpage
 
   SWAP vpage, dpage
   setvispage vpage
   dowait
  LOOP
  
  DeleteSlice @state.root
  IF state.done THEN EXIT DO
 LOOP

 v_free state.chainfrom
 v_free state.chainto

 RETURN selected
END FUNCTION

SUB init_attack_chain_screen(byval attack_id as integer, state as AttackChainBrowserState)
 DIM atk as AttackData
 loadattackdata atk, attack_id
 
 state.current = create_attack_preview_slice("", attack_id, state.root)
 state.current->AnchorHoriz = 1
 state.current->AlignHoriz = 1
 state.current->Y = 6

 v_resize state.chainto, 0
 IF atk.instead.atk_id > 0 THEN
  v_append state.chainto, create_attack_preview_slice("Instead", atk.instead.atk_id - 1, state.rbox)
 END IF
 IF atk.chain.atk_id > 0 THEN
  v_append state.chainto, create_attack_preview_slice("Regular", atk.chain.atk_id - 1, state.rbox)
 END IF
 IF atk.elsechain.atk_id > 0 THEN
  v_append state.chainto, create_attack_preview_slice("Else", atk.elsechain.atk_id - 1, state.rbox)
 END IF

 IF v_len(state.chainto) = 0 THEN
  v_append state.chainto, create_attack_preview_dummy_slice("(None)", state.rbox)
 END IF

 state.after.last = v_len(state.chainto) - 1

 '--now search for attacks that chain to this one
 v_resize state.chainfrom, 0
 FOR i as integer = 0 TO gen(genMaxAttack)
  loadattackdata atk, i
  IF atk.chain.atk_id - 1 = attack_id THEN
   v_append state.chainfrom, create_attack_preview_slice("Regular", i, state.lbox)
  END IF
  IF atk.elsechain.atk_id - 1 = attack_id THEN
   v_append state.chainfrom, create_attack_preview_slice("Else", i, state.lbox)
  END IF
  IF atk.instead.atk_id - 1 = attack_id THEN
   v_append state.chainfrom, create_attack_preview_slice("Instead", i, state.lbox)
  END IF
 NEXT i

 IF v_len(state.chainfrom) = 0 THEN
  v_append state.chainfrom, create_attack_preview_dummy_slice("(None)", state.lbox)
 END IF

 state.before.last = v_len(state.chainfrom) - 1
END SUB

FUNCTION create_attack_preview_dummy_slice(caption as string, byval parent as Slice Ptr) as Slice Ptr
 DIM box as Slice ptr = NewSliceOfType(slRectangle, parent)
 box->Width = 80
 box->Height = 10
 ChangeRectangleSlice box, 0
 ChangeRectangleSlice box, , , , -1

 DIM numsl as Slice Ptr = NewSliceOfType(slText, box)
 ChangeTextSlice numsl, caption, , YES
 numsl->AnchorHoriz = 1
 numsl->AlignHoriz = 1

 box->extra(0) = -1  'Not an attack
 RETURN box
END FUNCTION

FUNCTION create_attack_preview_slice(caption as string, byval attack_id as integer, byval parent as Slice Ptr) as Slice Ptr
 DIM atk as AttackData
 loadattackdata atk, attack_id
 
 DIM box as Slice Ptr = NewSliceOfType(slRectangle, parent)
 box->Width = 80
 box->Height = 50
 ChangeRectangleSlice box, 0
 ChangeRectangleSlice box, , , , -1

 DIM spr as Slice Ptr = NewSliceOfType(slSprite, box)
 ChangeSpriteSlice spr, sprTypeAttack, atk.picture, atk.pal, 2
 spr->AnchorHoriz = 1
 spr->AlignHoriz = 1
 spr->AnchorVert = 2
 spr->AlignVert = 2

 DIM numsl as Slice Ptr = NewSliceOfType(slText, box)
 ChangeTextSlice numsl, STR(attack_id), , YES
 numsl->AnchorHoriz = 1
 numsl->AlignHoriz = 1
 
 DIM namesl as Slice Ptr = NewSliceOfType(slText, box)
 ChangeTextSlice namesl, atk.name, , YES
 namesl->AnchorHoriz = 1
 namesl->AlignHoriz = 1
 namesl->Y = 10

 DIM capsl as Slice Ptr = NewSliceOfType(slText, box)
 ChangeTextSlice capsl, caption, , YES
 capsl->AnchorHoriz = 1
 capsl->AlignHoriz = 1
 capsl->AnchorVert = 2
 capsl->AlignVert = 2

 '--Save attack_id in the extra data
 box->extra(0) = attack_id
 RETURN box
END FUNCTION

SUB attack_preview_slice_focus(byval sl as Slice Ptr)
 IF sl = 0 THEN EXIT SUB
 ChangeRectangleSlice sl, , , , 0
 DIM ch as Slice Ptr = sl->FirstChild
 WHILE ch
  IF ch->SliceType = slText THEN
   ChangeTextSlice ch, , uilook(uiSelectedItem)
  END IF
  ch = ch->NextSibling
 WEND
END SUB

SUB attack_preview_slice_defocus(byval sl as Slice Ptr)
 IF sl = 0 THEN EXIT SUB
 ChangeRectangleSlice sl, , , , -1
 DIM ch as Slice Ptr = sl->FirstChild
 WHILE ch
  IF ch->SliceType = slText THEN
   ChangeTextSlice ch, , uilook(uiText)
  END IF
  ch = ch->NextSibling
 WEND
END SUB

'Get a list of the first letters (lowercase) of every word in each menu() string, except
'those words listed in excludewords. excludewords should be a space-separated
'list (case matters).
'menukeys() should be statically sized.
SUB get_menu_hotkeys (menu() as string, byval menumax as integer, menukeys() as string, excludewords as string = "")
 'Easy exercise for the reader: Write this in three lines of Python
 DIM excludes() as string
 IF excludewords = "" THEN
  REDIM excludes(-1 TO -1)
 ELSE
  split excludewords, excludes(), " "
 END IF
 FOR i as integer = 0 TO menumax
  menukeys(i) = ""
  DIM firstletter as bool = YES
  FOR j as integer = 1 TO LEN(menu(i))
   DIM isalp as integer = isalpha(menu(i)[j - 1])
   IF firstletter ANDALSO isalp THEN
    DIM excluded as bool = NO
    FOR k as integer = 0 TO UBOUND(excludes)
     IF MID(menu(i), j, LEN(excludes(k))) = excludes(k) THEN excluded = YES : EXIT FOR
    NEXT
    IF excluded = NO THEN
     menukeys(i) += LCASE(MID(menu(i), j, 1))
    END IF
   END IF
   firstletter = (isalp = 0)
  NEXT
  'debug "hotkeys from '" & menu(i) & "' -> '" & menukeys(i) & "'"
 NEXT
END SUB

FUNCTION experience_chart (byval expcurve as double=0.2) as double

 'DIM exp_first_level as integer = 30
 'DIM exp_adder as integer = 5
 'DIM exp_uppercap as integer = 1000000

 DIM mode as integer = 0
 STATIC hero_count as integer = 4
 STATIC enemy_id as integer = 0
 DIM enemy as EnemyDef

 STATIC form_id as integer = 0

 DIM startfrom as integer = 4
 DIM menu(startfrom + gen(genMaxLevel)) as string
 menu(0) = "Previous menu..."
 DIM state as MenuState
 WITH state
  .autosize = YES
  .last = UBOUND(menu)
  .need_update = YES
 END WITH
 DIM menuopts as MenuOptions
 menuopts.wide = 312

 STATIC first_view as bool = YES

 setkeys
 DO
  setwait 55
  setkeys

  IF keyval(ccCancel) > 1 THEN EXIT DO
  IF keyval(scF1) > 1 THEN show_help "experience_chart"
  usemenu state
  IF enter_space_click(state) THEN
   IF state.pt = 0 THEN EXIT DO
  END IF
  IF state.pt = 1 THEN
   DIM curve_int as integer = expcurve * 100
   IF intgrabber(curve_int, 0, 100) THEN
    expcurve = curve_int / 100
    state.need_update = YES
   END IF
  END IF
  IF state.pt = 2 THEN
   IF intgrabber(mode, 0, 2) THEN state.need_update = YES
  END IF
  IF state.pt = 3 THEN
   IF mode = 1 THEN
    IF enemygrabber(enemy_id, state) THEN state.need_update = YES
   ELSEIF mode = 2 THEN
    IF intgrabber(form_id, 0, gen(genMaxFormation)) THEN state.need_update = YES
   END IF
  END IF
  IF state.pt = 4 THEN
   IF intgrabber(hero_count, 1, 4) THEN state.need_update = YES
  END IF

  IF state.need_update THEN
   DIM test_exp as integer = 0
   DIM test_name as string
   menu(1) = "Experience curve: " & format(expcurve, "0.00")
   IF mode = 0 THEN
    menu(2) = "Preview mode: Total Exp."
    menu(3) = "Compared to N/A"
   ELSEIF mode = 1 THEN
    loadenemydata enemy, enemy_id
    menu(2) = "Preview mode: Enemy"
    menu(3) = "Compared to enemy: " & enemy_id & " " & enemy.name & " (" & enemy.reward.exper & " exp)"
    test_exp = enemy.reward.exper
    test_name = enemy.name
   ELSEIF mode = 2 THEN
    DIM form as Formation
    LoadFormation form, form_id
    test_exp = 0
    FOR i as integer = 0 TO 7
     IF form.slots(i).id >= 0 THEN
      loadenemydata enemy, form.slots(i).id
      test_exp += enemy.reward.exper
     END IF
    NEXT i
    menu(2) = "Compare mode: Formation"
    menu(3) = "Compared to formation: " & form_id & " (" & test_exp & " exp)"
    test_name = "Formation" & form_id
   END IF
   menu(4) = "Distributed to a party of: " & hero_count & " heroes"
   DIM suffix as string
   DIM killcount as string
   FOR lev as integer = 1 TO gen(genMaxLevel)
    IF mode = 0 THEN
     suffix = "total " & total_exp_to_level(lev, expcurve)
    ELSE
     IF test_exp > 0 THEN
      killcount = STR(ceiling(exptolevel(lev, expcurve) / test_exp * hero_count))
     ELSE
      killcount = "infinite"
     END IF
     suffix = "= " & test_name & "*" & killcount
    END IF
    menu(startfrom + lev) = "Level " & lev & " +" & exptolevel(lev, expcurve) & " " & suffix
   NEXT lev
   state.need_update = NO
  END IF

  clearpage vpage
  draw_fullscreen_scrollbar state, , vpage
  standardmenu menu(), state, 0, 0, vpage, menuopts
  setvispage vpage
  dowait

  IF first_view THEN
   first_view = NO
   'notification "This screen is informational only. You cannot customize the experience formula yet."
  END IF
 LOOP 
 RETURN expcurve
END FUNCTION

SUB stat_growth_chart ()
 'midpoint should stored in gen()
 DIM midpoint as double = 0.3219  'default to current
 DIM midpoint_repr as string = format_percent(midpoint, 4)

 DIM menu(2) as string
 menu(0) = "Previous menu..."
 DIM state as MenuState
 WITH state
  .size = 24
  .last = UBOUND(menu)
  .need_update = YES
 END WITH

 DIM preview_lev as integer = gen(genMaxLevel) \ 2

 'Position and size of the graph
 DIM rect as RectType
 rect.x = 150
 rect.y = 40
 rect.wide = 150
 rect.high = 140
 DIM origin_y as integer = rect.y + rect.high

 setkeys YES
 DO
  setwait 55
  setkeys YES

  IF keyval(ccCancel) > 1 THEN EXIT DO
  IF keyval(scF1) > 1 THEN show_help "stat_growth"
  usemenu state
  IF enter_space_click(state) THEN
   IF state.pt = 0 THEN EXIT DO
  END IF
  IF state.pt = 1 THEN
   state.need_update OR= percent_grabber(midpoint, midpoint_repr, -0.1, 1.2, 4)
  ELSEIF state.pt = 2 THEN
   state.need_update OR= intgrabber(preview_lev, 0, gen(genMaxLevel))
  END IF

  IF state.need_update THEN
   menu(1) = "Fix value at level " & (gen(genMaxLevel) / 2) & " : " & midpoint_repr
   menu(2) = "Preview: at level " & preview_lev & " = " & format_percent(atlevel_quadratic(preview_lev, 0, 1000000, midpoint) / 1000000, 4)  ' of Level" & gen(genMaxLevel) & " value"
   state.need_update = NO
  END IF

  'Draw screen
  clearpage vpage
  standardmenu menu(), state, 0, 0, vpage

  'Draw a 150x150 graph
  'axes
  drawline rect.x, origin_y, rect.x, rect.y, uilook(uiDisabledItem), vpage
  drawline rect.x, origin_y, rect.x + rect.wide, origin_y, uilook(uiDisabledItem), vpage
  'line (drawn so that if genMaxLevel is small, you get a lot of steps, and never sloped line segments)
  DIM lasty as double
  FOR x as integer = 0 TO rect.wide - 1
   DIM lev as integer = INT((gen(genMaxLevel) + 1) * x / rect.wide)  'floor
   DIM y as double = atlevel_quadratic(lev, 0, rect.high * 100, midpoint) / 100
   IF x = 0 THEN lasty = y
   drawline x + rect.x, origin_y - y, x + rect.x, origin_y - lasty, uilook(uiHighlight), vpage
   lasty = y
  NEXT

  'Draw crosshair
  DIM crosshair_lev as double
  IF state.pt = 2 THEN crosshair_lev = preview_lev ELSE crosshair_lev = gen(genMaxLevel) / 2
  DIM as double crosshairx, crosshairy  'in pixels
  crosshairx = rect.wide * crosshair_lev / gen(genMaxLevel)
  crosshairy = atlevel_quadratic(crosshair_lev, 0, rect.high * 100, midpoint) / 100
  drawline rect.x + crosshairx - 3, origin_y - crosshairy, rect.x + crosshairx + 3, origin_y - crosshairy, uilook(uiHighlight2), vpage
  drawline rect.x + crosshairx, origin_y - crosshairy - 3, rect.x + crosshairx, origin_y - crosshairy + 3, uilook(uiHighlight2), vpage

  setvispage vpage
  dowait
 LOOP 
END SUB

FUNCTION pick_channel_name() as string
 #ifdef __FB_WIN32__
  #ifdef UWP
   'This pipe name is mandatory in UWP. (Should it actually be \.\pipe\LOCAL? Looks like a typo in the docs)
   'Note, named pipes can only be used between apps in the same container.
   return "\\.\pipe\LOCAL"
  #else
   return "\\.\pipe\ohrrpgce_lump_updates_testing_" & randint(100000)
  #endif
 #else
  return tmpdir + ".lump_updates.txt"
 #endif
END FUNCTION

' Used by spawn_game to run gdb or valgrind.
' Returns a ProcessHandle or NO/NULL.
' Note: these's a fair bit of overlap between this and spawn_and_wait for Unix,
' but this is specific to spawn_game. spawn_and_wait has better error checking.
FUNCTION spawn_console_process(executable as string, args as string, title as string) as ProcessHandle
 #IFDEF __FB_UNIX__
  ' On Unix the spawned program doesn't inherit access to our tty even if we have one,
  ' so need to spawn it inside an xterm
  ' TODO: this isn't going to work on OSX... unless maybe you have X11 installed?
  ' Wrap in a xterm call...
  DIM xtermargs as string
  xtermargs = " -geometry 120x30 -bg black -fg gray90 -title '" & title & "' -e " _
              """" & escape_string(executable & " " & args, """\") & """"
  executable = find_helper_app("xterm")
  IF LEN(executable) = 0 THEN
   notification "xterm is missing; can't continue"
   RETURN NO
  END IF

  waitforkeyrelease
  RETURN open_process(executable, xtermargs, YES, YES)

 #ELSEIF defined(__FB_WIN32__)
  waitforkeyrelease
  ' Likewise on Windows need a console. But this is only implemented on Windows
  RETURN open_console_process(executable, args)
 #ELSE
  notification "Running under GDB/Valgrind not implemented on this platform"
  RETURN NO
 #ENDIF
END FUNCTION

'Spawn Game for live-previewing. Puts the ProcessHandle in Game_process.
'At most one of gdb and valgrind should be true.
'Returns true if successfully spawned
FUNCTION spawn_game(gdb as bool = NO, valgrind as bool = NO) as bool
 IF Game_process <> 0 THEN
  'First clean up after the last time we ran Game
  cleanup_process @Game_process
 END IF

 DIM channel_name as string
 channel_name = pick_channel_name()
 IF channel_open_server(channel_to_Game, channel_name) = NO THEN
  notification "Couldn't open channel to communicate with Game"
  RETURN NO
 END IF
 debuginfo "Successfully opened IPC channel " + channel_name

 DIM gameexename as string = GAMEEXE
 DIM executable as string

#ifdef __FB_DARWIN__
 gameexename = "OHRRPGCE-Game"
 CONST mac_game_bundle as string = "OHRRPGCE-Game.app/Contents/MacOS/ohrrpgce-game"
 ' First check for unbundled ohrrpgce-game (because it would be most recently built) then OHRRPGCE-Game.app
 executable = exepath & SLASH & GAMEEXE
 IF isfile(executable) = NO THEN
  executable = app_dir & GAMEEXE
  IF isfile(executable) = NO THEN
   executable = app_dir & mac_game_bundle
   IF isfile(executable) = NO THEN
    'If Gatekeeper Path Randomization (aka App Translocation) happens, then EXEPATH (and app_dir)
    'is a random path inside a read-only mount.
    'So also check CURDIR, which is the location of the .rpg, or a global location
    executable = CURDIR & SLASH & mac_game_bundle
    IF isfile(executable) = NO THEN
     executable = ENVIRON("HOME") & "/Applications/" & mac_game_bundle
     IF isfile(executable) = NO THEN
      executable = "/Applications/" & mac_game_bundle
     END IF
    END IF
   END IF
  END IF
 END IF
#else
 executable = app_dir & GAMEEXE
#endif
 IF isfile(executable) = NO THEN
#ifdef __FB_DARWIN__
  IF INSTR(EXEPATH, "AppTranslocation") THEN
   'Gatekeeper Path Randomization is active. Also possible to detect with an API, or by
   'checking whether the filesystem is read-only using statfs().
   visible_debug !"It appears that macOS's Gatekeeper has quarantined OHRRPGCE-Custom, so it can't access OHRRPGCE-Game. To disable the quarantine, move OHRRPGCE-Custom to a different folder using Finder (you can move it back afterwards), and make sure you're not running it from inside your Downloads folder or from inside the DMG you downloaded.\nAlternatively, place OHRRPGCE-Game next to the .rpg file or in your user or global Applications folder."
   RETURN NO
  END IF
#endif
  visible_debug "Couldn't find " & gameexename & !"\nIt should be in the same directory as " & CUSTOMEXE
  RETURN NO
 END IF
 DIM arguments as string
 #IFDEF __FB_UNIX__
  arguments = "--from_Custom " & escape_filename(channel_name)
 #ELSE
  'Not a filename
  arguments = "--from_Custom " & channel_name
 #ENDIF

 IF gdb THEN
  ' Wrap in a gdb call...
  ' channel_wait_for_client_connection is going to time out if Game isn't
  ' allowed to run normally, so as a compromise break immediately after the
  ' channel is connected. (You can always increase the 3sec delay instead.)

  ' We imitate invoking gdb via the gdbgame.sh/bat script
  DIM cmdfile as string
  cmdfile = finddatafile("misc/gdbcmds1.txt", NO)

  DIM gdbargs as string
  IF LEN(cmdfile) > 0 THEN
   gdbargs = "-x=""" & cmdfile & """ "
   ' gdbcmds1.txt adds breakpoints to catch -exx fatal errors, so disable the -exx handler
   arguments &= " --rawexx"
  ELSE
   gdbargs = "-ex ""break HOOK_AFTER_ATTACH_TO_CUSTOM"" -ex ""run"" "
  END IF
  gdbargs &= "--args " & executable & " " & arguments
  executable = find_helper_app("gdb")
  IF LEN(executable) = 0 THEN
   notification "Couldn't find gdb. You need to install it."
   RETURN NO
  END IF

  Game_process = spawn_console_process(executable, gdbargs, "gdb " & GAMEEXE)

 ELSEIF valgrind THEN
  #IFNDEF __FB_UNIX__
   notification "Valgrind only supported on UNIX"
   RETURN NO
  #ENDIF

  executable = find_helper_app("valgame.sh")
  IF LEN(executable) = 0 THEN
   notification "Couldn't find valgame.sh. You should run from a copy of the source code."
   RETURN NO
  END IF

  Game_process = spawn_console_process(executable, arguments, "valgame.sh")

 ELSE
  waitforkeyrelease
  Game_process = open_process(executable, arguments, YES, YES)
 END IF

 'debuginfo "Spawning: " & executable & " " & arguments

 IF Game_process = 0 THEN
  notification "Couldn't run " & gameexename
  RETURN NO
 END IF
 'We currently do nothing at all with Game_process except cleanup (on Unix
 'closing the channel freezes until the child finishes).
 'Instead we test Game is still running by checking channel_to_Game

 'Need Game to connect before we can safely write to the pipe; wait up to 3000ms
 DIM waitms as integer = IIF(valgrind, 9000, IIF(gdb, 5000, 3000))
 IF channel_wait_for_client_connection(channel_to_Game, waitms) = 0 THEN
  notification "Error communicating with " & gameexename & !" (couldn't connect); aborting\n(Press a key)"
  channel_close channel_to_Game
  cleanup_process @Game_process
  RETURN NO
 END IF

 'Write version info
 DIM tmp as string
 'msgtype magickey,proto_ver,program_ver,version_string
 tmp = "V OHRRPGCE," & CURRENT_TESTING_IPC_VERSION & "," & version_revision & "," & short_version
 channel_write_line(channel_to_Game, tmp)
 tmp = "G " & sourcerpg
 channel_write_line(channel_to_Game, tmp)
 tmp = "W " & workingdir
 channel_write_line(channel_to_Game, tmp)
 'If any of these writes fails, channel_to_Game is closed

 IF channel_to_Game THEN
  'If we got this far, start sending lump updates and locking files before writing
  set_OPEN_hook @inworkingdir, YES, YES, @channel_to_Game
 ELSE
  notification "Error communicating with " & gameexename & !" (channel write failure); aborting\n(Press a key)"
  channel_close channel_to_Game
  cleanup_process @Game_process
  RETURN NO
 END IF
 RETURN YES
END FUNCTION

SUB spawn_game_menu(gdb as bool = NO, valgrind as bool = NO)
 #IFDEF __FB_WIN32__
  IF is_windows_9x() THEN
   notification "Testing your game while editing isn't supported on your version of Windows; it requires an NT-based Windows release"
   EXIT SUB
  END IF
 #ENDIF

 'Prod the channel to see whether it's still up (send ping)
 channel_write_line(channel_to_Game, "P ")

 DIM scancode as integer
 IF channel_to_Game THEN
  scancode = notification(!"The game is already running! You can't run multiple test copies of a game, but any edits you make will take effect without restarting.\n" _
                           "Press F1 to see the help file for Test Game.")
 ELSE
  gen(genCurrentDebugMode) = 1
  xbsave game + ".gen", gen(), 1000
  IF spawn_game(gdb, valgrind) THEN
   scancode = notification( "You're running your game in live preview mode. " _
                           !"Press F1 now to read the help file for this if you haven't already.\n\n" _
                            "Press any key")
  END IF
 END IF
 IF scancode = scF1 THEN show_help "test_game"
END SUB

'Update and save edit_time and last_saved for the game
SUB save_edit_time ()
 DIM gen_root as NodePtr = get_general_reld()
 DIM timenode as NodePtr = GetOrCreateChild(gen_root, "edit_time")
 SetContent(timenode, GetFloat(timenode) + active_seconds - last_active_seconds)
 debuginfo "Saving - been editing for " & format_duration(active_seconds - last_active_seconds, 0)

 SetChildNodeDate(gen_root, "last_saved", NOW)
 
 last_active_seconds = active_seconds
 write_general_reld()
END SUB

'Return true on success
FUNCTION save_current_game (byval genDebugMode_override as integer=-1) as bool
 'Apply the appropriate genCurrentDebugMode
 IF genDebugMode_override >= 0 THEN
  gen(genCurrentDebugMode) = genDebugMode_override
 ELSE
  gen(genCurrentDebugMode) = gen(genDebugMode)
 END IF
 xbsave game + ".gen", gen(), 1000
 save_edit_time

 clearpage vpage
 textcolor uilook(uiText), vpage
 printstr "LUMPING DATA: please wait.", 0, 0, vpage
 setvispage vpage, NO
 '--verify various stuff
 rpg_sanity_checks
 clearpage vpage
 '--lump data to SAVE rpg file
 IF write_rpg_or_rpgdir(workingdir, sourcerpg) THEN
  write_session_info  'Update sourcerpg mtime and reset editing start time
  IF automatic_backup(sourcerpg) = NO THEN
   visible_debug "Successfully saved the game, but couldn't write automatic backup to autobackups folder"
  ELSE
   show_overlay_message "Saved, and copied to autobackups", 0.6
  END IF
  RETURN YES
 END IF
END FUNCTION

'Returns true on success
FUNCTION automatic_backup (rpgfile as string) as bool
 DIM keep_how_many as integer = 10 'FIXME: this could be customized per-game

 DIM backupdir as string = trimfilename(rpgfile) & SLASH & "autobackups"
 IF NOT isdir(backupdir) THEN makedir backupdir
 IF NOT diriswriteable(backupdir) THEN
  debug "Can't do automatic backups: """ & backupdir & """ is not writeable"
  RETURN NO
 END IF
 DIM warnfile as string = backupdir & SLASH & "README-WARNING-automatic-backups.txt"
 IF NOT isfile(warnfile) THEN
  string_to_file !"This folder contains automatic backups. A copy of your game is made here\n" _
                 "every time that CUSTOM saves a game. At most 10 copies per game are kept.\n" _
                 "WARNING! These automatic backups are no substitute for manual backups!\n" _
                 "They are just here to save your slime that one time you forget!\n\n" _
                 "If you don't have any other backup plan, at least remember to e-mail\n" _
                 "a copy of your .rpg file to yourself once a week.", warnfile
 END IF

 'Copy the backup
 DIM datestr as string = MID(DATE, 7, 4) & "-" & MID(DATE, 1, 2) & "-" & MID(DATE, 4, 2)
 DIM destfile as string = backupdir & SLASH & trimextension(trimpath(rpgfile)) & "-" & datestr & "." & justextension(rpgfile)
 DIM ret as bool
 IF isdir(rpgfile) THEN
  IF isdir(destfile) THEN killdir destfile
  ret = confirmed_copydirectory(rpgfile, destfile)
 ELSE
  ret = writeablecopyfile(rpgfile, destfile)
 END IF
 IF ret = NO THEN RETURN NO

 'Cull old backups to avoid bloatclutter.
 REDIM oldfiles() as string
 findfiles backupdir, trimextension(trimpath(rpgfile)) & "-*.rpg", fileTypeFile, , oldfiles()
 REDIM olddirs() as string
 findfiles backupdir, trimextension(trimpath(rpgfile)) & "-*.rpgdir", fileTypeDirectory, , olddirs()
 DIM old as string vector
 v_new old
 FOR i as integer = 0 TO UBOUND(oldfiles)
  IF LEN(oldfiles(i)) THEN v_append old, oldfiles(i)
 NEXT i
 FOR i as integer = 0 TO UBOUND(olddirs)
  IF LEN(olddirs(i)) THEN v_append old, olddirs(i)
 NEXT i
 v_sort old
 DIM oldrpg as string
 FOR i as integer = v_len(old) - 1 - keep_how_many TO 0 STEP -1
  oldrpg = backupdir & SLASH & old[i]
  IF isdir(oldrpg) THEN
   killdir oldrpg
  ELSE
   safekill oldrpg
  END IF
 NEXT i
 v_free old
 RETURN YES
END FUNCTION

' Save all lumps in lumpsdir, except for *.tmp, as a lumped file or .rpgdir directory.
' Returns true on success.
' Note that this can set cleanup_workingdir_on_exit=NO on failure.
FUNCTION write_rpg_or_rpgdir (lumpsdir as string, filetolump as string) as bool
 '--build the list of files to lump. We don't need hidden files
 DIM filelist() as string
 findfiles lumpsdir, ALLFILES, fileTypeFile, NO, filelist()
 'Removes .tmp files
 fixlumporder filelist()
 IF isdir(filetolump) THEN
  '---copy changed files back to source rpgdir---
  IF NOT fileiswriteable(filetolump & SLASH & "archinym.lmp") THEN
   move_unwriteable_rpg filetolump
   makedir filetolump
  END IF
  FOR i as integer = 0 TO UBOUND(filelist)
   safekill filetolump + SLASH + filelist(i)
   IF writeablecopyfile(lumpsdir + SLASH + filelist(i), filetolump + SLASH + filelist(i)) = NO THEN
    pop_warning "Failed to save game to " & filetolump & LINE_END "Look in c_debug.txt for error messages."
    RETURN NO
   END IF
   'Moving files instead would offer no failsafe if something goes wrong while moving
   '(Plus can't move from different mounted filesystem)
  NEXT
 ELSE
  '---relump data into lumpfile package---
  IF NOT fileiswriteable(filetolump) THEN
   move_unwriteable_rpg filetolump
  END IF
  DIM errmsg as string = lumpfiles(filelist(), filetolump, lumpsdir + SLASH)
  IF lumpsdir = workingdir THEN
   cleanup_workingdir_on_exit = (LEN(errmsg) = 0)  'Don't delete workingdir if it hasn't been saved
  END IF
  IF LEN(errmsg) THEN
   'Show a warning instead of a fatal error: this isn't fatal
   pop_warning "Failed to save game to " & filetolump & ": " & errmsg
   RETURN NO
  END IF
 END IF
 RETURN YES
END FUNCTION

SUB move_unwriteable_rpg (filetolump as string)
 clearpage vpage
 DIM newfile as string = documents_dir & SLASH & trimpath(filetolump)
 visible_debug filetolump + " is not writeable. Saving to " + newfile
 filetolump = newfile
END SUB

SUB check_used_onetime_npcs(bits() as integer)
 'Search through all the NPC definitions and figure out which NPC onetime
 ' bits have been used. The result is a bitset array with 0 bits for unused
 ' onetimes and 1 bits for used onetimes.
 flusharray bits()
 setbit bits(), 0, 0, YES ' bit 0 can't be used, 0 indicates usable repeatedly.
 setbit bits(), 0, 1, YES ' bit 1 can't be used, because istag() doesn't allow tag 1.
 REDIM npcdata(0) as NPCType
 FOR m as integer = 0 TO gen(genMaxMap)
  LoadNPCD maplumpname(m, "n"), npcdata()
  check_used_onetime_npcs_npcdata bits(), npcdata(), m
 NEXT m
 LoadNPCD global_npcdef_filename(1), npcdata(), NO  'expect_exists=NO
 check_used_onetime_npcs_npcdata bits(), npcdata(), -1
END SUB

SUB check_used_onetime_npcs_npcdata(bits() as integer, npcdata() as NPCType, mapnum as integer)
 FOR i as integer = 0 TO UBOUND(npcdata)
  WITH npcdata(i)
   IF .usetag > max_onetime THEN
    debugerror "out-of-range onetime tag " & .usetag & " for NPC " & i & IIF(mapnum >= 0, " on map " & mapnum, " global pool " & ABS(mapnum))
   ELSEIF .usetag > 0 THEN
    IF readbit(bits(), 0, .usetag) THEN
     'Don't show a warning for duplicate onetime tags because it happens all the time with map copying
    END IF
    setbit bits(), 0, .usetag, YES
   END IF
  END WITH
 NEXT i
END SUB

SUB menu_of_reorderable_nodes(st as MenuState, menu as MenuDef)
 'This is intended for menus that represent sibling Nodes. The NodePtr
 'is in the .dataptr of the selected menu item
 WITH *menu.items[st.pt]
  IF .dataptr <> 0 THEN
   DIM node as NodePtr = .dataptr
   IF reorderable_node(node) THEN
    st.need_update = YES
   END IF
  END IF
 END WITH
END SUB

FUNCTION reorderable_node(byval node as NodePtr) as integer
 IF keyval(scShift) > 0 THEN
  IF node THEN
   IF keyval(ccUp) > 1 THEN
    SwapNodePrev node
    RETURN YES
   ELSEIF keyval(ccDown) > 1 THEN
    SwapNodeNext node
    RETURN YES
   END IF
  END IF
 END IF
 RETURN NO
END FUNCTION

TYPE PlatformOptionsEditor EXTENDS EditorKit
 DECLARE CONSTRUCTOR ()
 DECLARE SUB define_items ()
 DECLARE SUB edit_button_scancode (deletable as bool)
 DECLARE SUB button_list (parent as Node ptr)
 DECLARE SUB gamepad_button_menu_items (byval gamepad_node as NodePtr, use_dpad as bool, default_scancodes() as integer)

 gen_root as NodePtr
 vgp as NodePtr
 vgpb as NodePtr

 buttons(11) as string = {"A", "B", "X", "Y", "L1", "R1", "L2", "R2", "UP", "RIGHT", "DOWN", "LEFT"}
 ouya_buttons(11) as string = {"O", "A", "U", "Y", "L1", "R1", "L2", "R2", "UP", "RIGHT", "DOWN", "LEFT"}
 'xperia_buttons(11) as string = {"X?", "O?", "Square", "Triangle", "L1", "R1", "Doesn't Exist", "Doesn't Exist", "UP", "RIGHT", "DOWN", "LEFT"}
 default_scancodes(11) as integer = {scEnter, scESC, scESC, scESC, scPageUp, scPageDown, scHome, scEnd, scUp, scRight, scDown, scLeft}
 default_scancodes_multiplayer(11) as integer = {scEnter, scESC, scESC, scESC, scPageUp, scPageDown, scHome, scEnd, scUp, scRight, scDown, scLeft}
 player_who(3) as string = {"First", "Second", "Third", "Fourth"}
END TYPE

SUB edit_platform_controls ()
 DIM editor as PlatformOptionsEditor
 editor.run()
 write_general_reld()
END SUB

CONSTRUCTOR PlatformOptionsEditor
 helpkey = "general_platform_options"

 gen_root = get_general_reld()
 DIM mobile as Node ptr = GetOrCreateChild(gen_root, "mobile_options")
 GetOrCreateChild(gen_root, "console_options")
 GetOrCreateChild(gen_root, "gamepad")

 vgp = mobile."virtual_gamepad".ptr
 IF vgp = NULL THEN
  vgp = AppendChildNode(mobile, "virtual_gamepad")
  AppendChildNode(vgp, "button", scEnter)
  AppendChildNode(vgp, "button", scESC)
 END IF

 vgpb = mobile."virtual_gamepad_battle".ptr
 IF vgpb = NULL THEN
  vgpb = AppendChildNode(mobile, "virtual_gamepad_battle")
  AppendChildNode(vgpb, "button", scEnter)
  AppendChildNode(vgpb, "button", scESC)
 END IF
END CONSTRUCTOR

' Edit 'value' as a scancode
SUB PlatformOptionsEditor.edit_button_scancode(deletable as bool)
 IF activate THEN
  DIM sc as integer = prompt_for_scancode()
  IF sc >= 0 THEN
   value = sc
   edited = YES
  END IF
 ELSEIF process THEN
  IF deletable ANDALSO (keyval(scDelete) > 1 ORELSE (value = 0 ANDALSO keyval(scBackspace) > 1)) THEN
   delete_node
  ELSE
   edit_int value, 0, scLASTASSIGNED
  END IF
 END IF
END SUB

SUB PlatformOptionsEditor.button_list(parent as Node ptr)
 CONST vbutton_max = 6
 DIM button as Node ptr = FirstChild(parent, "button")
 DIM vbutton_count as integer
 FOR vbutton_count = 0 TO vbutton_max - 1
  IF button = 0 THEN EXIT FOR
  defitem "Button " & vbutton_count & ":"
  val_node_int button
  button = NextSibling(button, "button")  'Before button can be deleted
  edit_button_scancode YES  'Delete/backspace deletes the node
  set_caption rpad(scancodename(value), " ", 13) & "(" & value & ")"
 NEXT

 IF vbutton_count > vbutton_max THEN
  debug "Warning: shouldn't have more than " & vbutton_max & " mobile virtual gamepad buttons"
 ELSEIF vbutton_count < vbutton_max THEN
  IF defitem_act("Add another button") THEN
   AppendChildNode(parent, "button", 0)
  END IF
 END IF
END SUB

SUB PlatformOptionsEditor.gamepad_button_menu_items (byval gamepad_node as NodePtr, use_dpad as bool, default_scancodes() as integer)
 DIM ub as integer = UBOUND(buttons)
 '--always assumes that the dpad is at the end of the buttons() list
 IF NOT use_dpad THEN ub = ub - 4
 FOR bnum as integer = 0 TO ub
  DIM b as string = buttons(bnum)
  defitem "Button " & rpad(b, " ", 2) & ":"
  val_node_int gamepad_node, "/" & b
  DIM padnum as integer = 12 - large(0, LEN(b) - 2)
  edit_button_scancode NO  'Doesn't delete the node
  IF value THEN
   set_caption rpad(scancodename(value), " ", padnum) & "(" & value & ")"
  ELSE
   set_caption rpad(scancodename(default_scancodes(bnum)), " ", padnum) & "(Default)"
  END IF
  set_tooltip fgcol_text("OUYA Controller: " & ouya_buttons(bnum), uilook(uiSelectedDisabled))
 NEXT bnum
END SUB

SUB PlatformOptionsEditor.define_items()
 DIM gen_root as Node ptr = this.gen_root  'Work around reloadbasic errors

 defitem "Touch Textboxes:"
 IF get_gen_bool("/mouse/click_textboxes") THEN
  set_caption "YES [Click to advance textboxes ON]"
 ELSE
  edit_node_bool gen_root, "/mobile_options/touch_textboxes/enabled"
 END IF

 defitem "Phone/Tablet Virtual Gamepad:"
 invert_bool
 edit_node_exists gen_root, "/mobile_options/disable_virtual_gamepad"
 captions_bool "Disabled", "Enabled"

 IF value THEN  'Virtual Gamepad enabled
  defitem "Hide V.Gamepad when player suspended:"
  edit_node_bool gen_root, "/mobile_options/hide_virtual_gamepad_when_suspendplayer"

  section "Phone/Tablet Virtual Gamepad (Normal)"
  button_list vgp
  section "Phone/Tablet Virtual Gamepad (Battle Mode)"
  button_list vgpb
 END IF

 spacer
 section "Gamepad Buttons (Android only)"
 gamepad_button_menu_items gen_root."gamepad".ptr, NO, default_scancodes()

 section "Multiplayer Gamepad Options"
 IF NOT gen_root."multiplayer_gamepads".exists THEN
  '--Although all SDL2 platforms support multiplayer gamepad, OUYA multiplayer works differently...
  defitem "Enable OUYA multiplayer..."
  edit_node_exists gen_root, "/multiplayer_gamepads"
  'NOTE: once you enable (create) multiplayer_gamepads there's no option to delete them!
 ELSE
  FOR pnum as integer = 1 TO 3
   DIM player as Node ptr = NodeByPath(gen_root, "/multiplayer_gamepads/player[" & pnum & "]", YES) 'create=YES
   subsection player_who(pnum) & " player buttons"
   gamepad_button_menu_items player, YES, default_scancodes_multiplayer()
  NEXT
 END IF

 spacer
 IF defitem_act("Button name strings for text boxes...") THEN edit_button_name_strings
END SUB

FUNCTION prompt_for_scancode () as KBScancode
 'Return a user-specified scancode, or -1 if cancelled.
 
 DIM result as KBScancode = -1
 
 DIM instructions as string = "To choose a key, press and hold the desired key until the flashing bar fills. Tap ESC briefly to cancel."
 DIM toomany as string = "That is too many keys, please just press one."
 DIM nowrelease as string = "New key confirmed! Now release it."

 DIM pressed as KBScancode
 DIM presstime as double ' the timestamp when the key was first pressed
 DIM heldfor as double ' the number of seconds the key has been held
 CONST threshold = 0.4  ' seconds to hold to confirm a key
 DIM keylist as string
 DIM keyname as string
 DIM count as integer
 DIM confirmed as KBScancode = 0
 DIM bartog as bool = NO
 
 DIM root as Slice Ptr
 root = NewSliceOfType(slContainer)
 WITH *root
  .Fill = YES
 END WITH

 DIM box as Slice Ptr
 box = NewSliceOfType(slRectangle, root)
 WITH *box
  .width = 308
  .height = 48
  .AnchorHoriz = alignCenter
  .AnchorVert = alignBottom
  .AlignHoriz = alignCenter
  .AlignVert = alignBottom
  .paddingLeft = 8
  .paddingRight = 8
  .paddingTop = 8
  .paddingBottom = 8
 END WITH
 ChangeRectangleSlice box, 1

 DIM infosl as Slice Ptr
 infosl = NewSliceofType(slText, box)
 infosl->Fill = YES
 ChangeTextSlice infosl, instructions, , , YES
 
 DIM bar as Slice Ptr
 bar = NewSliceOfType(slRectangle, root)
 WITH *bar
  .width = 0
  .height = 10
  .AnchorHoriz = alignCenter
  .AnchorVert = alignTop
  .AlignHoriz = alignCenter
  .AlignVert = alignTop
 END WITH

 DIM keybox as Slice Ptr
 keybox = NewSliceofType(slContainer, root)
 WITH *keybox
  .AnchorHoriz = alignCenter
  .AnchorVert = alignCenter
  .AlignHoriz = alignCenter
  .AlignVert = alignCenter
 END WITH
 
 DIM keysl as Slice Ptr
 keysl = NewSliceofType(slText, keybox)
  
 setkeys
 DO
  setwait 55
  setkeys
  IF getquitflag THEN result = -1: EXIT DO  'Unlike other menus, ESC doesn't quit, so have to check this manually

  IF confirmed THEN
   'A key has been confirmed, wait for it to be released
   ChangeTextSlice infosl, nowrelease
   bartog = NO
   IF keyval(pressed) = 0 THEN
    result = pressed
    EXIT DO
   END IF
  ELSE
   keylist = ""
   count = 0
   FOR i as KBScancode = 0 to scLAST
    SELECT CASE i
     CASE scAnyEnter, scUnfilteredAlt, scAlt, scShift, scCtrl, scMeta
      'These are less-specific keys
      CONTINUE FOR
    END SELECT
    IF keyval(i) > 0 THEN
     keyname = scancodename(i, YES)
     IF keyname <> "" THEN
      count += 1
      IF pressed <> i THEN
       presstime = TIMER
      END IF
      pressed = i
      keylist &= keyname & !"\n"
      IF count = 1 THEN
       keybox->width = LEN(keyname) * 8
      END IF
      keybox->height = count * 10
     END IF
    END IF
   NEXT i
   ChangeTextSlice keysl, keylist
   ChangeTextSlice infosl, instructions
   IF count = 0 THEN
    'No buttons are being held down.
    IF pressed = scESC THEN EXIT DO
    IF pressed = scF1 THEN show_help "prompt_for_scancode"
    pressed = 0
    bartog = NO
    bar->width = 0
   ELSEIF count > 1 THEN
    'Too manu buttons are being held down, so none of them count.
    ChangeTextSlice infosl, toomany
    pressed = 0
    bartog = NO
    bar->width = 0
   ELSE
    'Just one button is being held down, so it might be valid
    heldfor = TIMER - presstime
    bar->width = int(root->width / threshold * heldfor)
    bartog = NOT bartog
    IF heldfor > threshold THEN
     confirmed = pressed
    END IF
   END IF
  END IF

  IF bartog THEN
   ChangeRectangleSlice bar, , uiTimeBar, uiTimeBarFull
  ELSE
   ChangeRectangleSlice bar, , uiTimeBarFull, uiTimeBar
  END IF

  clearpage dpage
  DrawSlice root, dpage
  
  SWAP vpage, dpage
  setvispage vpage
  dowait
 LOOP

 DeleteSlice @root
 RETURN result
END FUNCTION

CONST buttonnameEXIT as integer = 0
CONST buttonnameADD as integer = 1
CONST buttonnameDATA as integer = 2
CONST buttonnameBROWSE as integer = 3

SUB edit_button_name_strings()

 DIM plat_key(...) as string = {"keyboard", "touchscreen", "ouya", "console"}
 DIM plat_detail(...) as string = {_
     "Windows, Mac and Linux",_
     "Any touchscreen device (Android)",_
     "OUYA Console",_
     "Other Android Consoles"}

 DIM menu as MenuDef
 
 DIM keynum as integer = 0
 
 DIM st as MenuState
 st.active = YES
 st.need_update = YES
 
 DIM gen_root as NodePtr = get_general_reld()

 '-- the buttonnames node will be created with defaults in
 '-- update_general_data() if it does not exist already.
 DIM buttonnames as NodePtr = gen_root."buttonnames".ptr

 DIM codenum as integer
 DIM freenum as integer

 DIM t as integer
 DIM node as NodePtr
 DIM strnode as NodePtr
 DIM curstr as string

 setkeys YES
 DO
  setwait 55
  setkeys YES
  IF keyval(scF1) > 1 THEN show_help "edit_button_name_strings"
  IF keyval(ccCancel) > 1 THEN EXIT DO

  IF st.need_update THEN
   st.need_update = NO
  
   InitLikeStandardMenu menu

   append_menu_item menu, "Previous menu..."
   menu.last->t = buttonnameEXIT

   append_menu_item menu, CHR(27) & " Platform: " & plat_key(keynum) & " " & CHR(26)
   menu.last->t = buttonnameBROWSE

   append_menu_item menu, " " & plat_detail(keynum)
   menu.last->unselectable = YES
   menu.last->col = uilook(eduiHeading)

   freenum = 0
   READNODE buttonnames
    WITHNODE buttonnames."code" as codenode
     codenum = GetInteger(codenode)
     IF freenum <= codenum THEN freenum = codenum + 1
     curstr = GetChildNodeStr(codenode, plat_key(keynum), default_button_name_for_platform(plat_key(keynum), codenum))
     append_menu_item menu, "${B" & codenum & "} = " & curstr
     menu.last->t = buttonnameDATA
     menu.last->dataptr = codenode
    END WITHNODE
   END READNODE
   
   append_menu_item menu, "Add a new button name"
   menu.last->t = buttonnameADD

   init_menu_state st, menu
  END IF '--done updating menu

  usemenu st, menu

  t = menu.items[st.pt]->t
  node = menu.items[st.pt]->dataptr
  
  IF t = buttonnameBROWSE THEN
   IF keyval(ccLeft) > 1 THEN
    loopvar keynum, 0, UBOUND(plat_key), -1
    st.need_update = YES
   END IF
   IF keyval(ccRight) > 1 THEN
    loopvar keynum, 0, UBOUND(plat_key), 1
    st.need_update = YES
   END IF
  ELSEIF t = buttonnameDATA THEN
   curstr = GetChildNodeStr(node, plat_key(keynum), default_button_name_for_platform(plat_key(keynum), GetInteger(node)))
   IF strgrabber(curstr, 16) THEN
    SetChildNode(node, plat_key(keynum), curstr)
    st.need_update = YES
   END IF
  END IF
  
  IF enter_space_click(st) THEN
   SELECT CASE t
    CASE buttonnameEXIT: EXIT DO
    CASE buttonnameADD:
     DIM newcodenode as NodePtr = AppendChildNode(buttonnames, "code", freenum)
     FOR i as integer = 0 TO UBOUND(plat_key)
      AppendChildNode(newcodenode, plat_key(i), "")
     NEXT i
     st.need_update = YES
   END SELECT
  END IF
  
  clearpage dpage
  
  draw_menu menu, st, dpage
  SWAP vpage, dpage
  setvispage vpage
  
  dowait
 LOOP

END SUB

CONST editpurchEXIT as integer = 1
CONST editpurchSTRING as integer = 2
CONST editpurchTAGSET as integer = 3
CONST editpurchADD as integer = 4
CONST editpurchPROD as integer = 5
CONST editpurchLONGSTRING as integer = 6
CONST editpurchINT as integer = 7
CONST editpurchSTOREDEFAULT as integer = 8
CONST editpurchSTOREOUYA as integer = 9
CONST editpurchTOGGLEREPEATABLE as integer = 10 'sucks that this is so specific
CONST editpurchKEYDER as integer = 11

SUB edit_purchase_options ()

 DIM menu as MenuDef
 
 DIM st as MenuState
 st.active = YES
 st.need_update = YES

 REDIM enabled(0) as bool

 DIM gen_root as NodePtr = get_general_reld()
 DIM purchase_root as NodePtr = GetOrCreateChild(gen_root, "purchase_root")
 DIM products as NodePtr = GetOrCreateChild(purchase_root, "products")
 
 DIM t as integer
 DIM sub_t as integer
 DIM node as NodePtr
 
 DIM default_stores(1) as string = {"disabled", "paypal"}
 DIM ouya_stores(1) as string = {"disabled", "ouya"}

 setkeys YES
 DO
  setwait 55
  setkeys YES
  IF keyval(scF1) > 1 THEN show_help "edit_purchase_options"
  IF keyval(ccCancel) > 1 THEN EXIT DO

  IF st.need_update THEN
   st.need_update = NO
   edit_purchase_options_rebuild_menu menu, st, purchase_root
  END IF '--done updating menu

  usemenu st, menu

  t = menu.items[st.pt]->t
  sub_t = menu.items[st.pt]->sub_t
  node = menu.items[st.pt]->dataptr
  
  SELECT CASE t
   CASE editpurchSTRING:
    IF node THEN
     DIM curstr as string
     curstr = GetString(node)
     IF strgrabber(curstr, sub_t) THEN
      SetContent(node, curstr)
      st.need_update = YES
     END IF
    END IF
   CASE editpurchSTOREDEFAULT:
    IF edit_purchase_enumgrabber(node, default_stores()) THEN st.need_update = YES
   CASE editpurchSTOREOUYA:
    IF edit_purchase_enumgrabber(node, ouya_stores()) THEN st.need_update = YES
  END SELECT
  
  IF enter_space_click(st) THEN
   SELECT CASE t
    CASE editpurchEXIT: EXIT DO
    CASE editpurchADD:
     DIM newnode as NodePtr = AppendChildNode(products, "prod")
     st.need_update = YES
    CASE editpurchPROD:
     edit_purchase_details node
     st.need_update = YES
    CASE editpurchSTOREDEFAULT:
     IF edit_purchase_enumbrowse("Store for In-App Purchases", node, default_stores(), "edit_purchase_options") THEN st.need_update = YES
    CASE editpurchSTOREOUYA:
     IF edit_purchase_enumbrowse("Store for In-App Purchases", node, ouya_stores(), "edit_purchase_options") THEN st.need_update = YES
    CASE editpurchKEYDER:
     DIM key_der_file as string
     key_der_file = browse(browseAny, "", "key.der", "edit_purchase_browse_ouya_key_der")
     IF key_der_file <> "" THEN
      IF isfile(key_der_file) THEN
       SetContent(node, string_from_file(key_der_file))
       st.need_update = YES
      ELSE
       pop_warning "Unable to read the file """ & decode_filename(key_der_file) & """"
      END IF
     END IF
   END SELECT
  END IF
  
  IF keyval(scDelete) > 1 THEN
   IF yesno("Delete the selected product?", NO, NO) THEN
    FreeNode node
    st.need_update = YES
   END IF
  END IF
  
  clearpage dpage
  
  draw_menu menu, st, dpage
  wrapprint "Don't enable purchases unless all the content in your game is original!", 0, pBottom, uilook(uiSelectedDisabled), dpage
  
  SWAP vpage, dpage
  setvispage vpage
  
  dowait
 LOOP

 write_general_reld()
END SUB

SUB edit_purchase_options_rebuild_menu(menu as MenuDef, st as MenuState, byval purchase_root as NodePtr)

 DIM store_node as NodePtr = GetOrCreateChild(purchase_root, "stores_by_platform")
 DIM ouya_node as NodePtr = GetOrCreateChild(purchase_root, "ouya")
 DIM products as NodePtr = GetOrCreateChild(purchase_root, "products")

 DIM node as NodePtr
 DIM cap as string

 InitLikeStandardMenu menu

 append_menu_item menu, "Previous menu..."
 menu.last->t = editpurchEXIT

 append_menu_item menu, "(This menu is experimental!)"
 menu.last->unselectable = YES
 menu.last->col = uilook(uiMouseHoverItem)

 append_menu_item menu, ""
 menu.last->unselectable = YES
 append_menu_item menu, " Enabled Stores"
 menu.last->unselectable = YES
 menu.last->col = uilook(eduiHeading)

 node = GetOrCreateChild(store_node, "default")
 append_menu_item menu, "Windows+Mac+Linux: " & blank_default(GetString(node), "disabled")
 menu.last->t = editpurchSTOREDEFAULT
 menu.last->dataptr = node

 node = GetOrCreateChild(store_node, "ouya")
 append_menu_item menu, "OUYA Console: " & blank_default(GetString(node), "disabled")
 menu.last->t = editpurchSTOREOUYA
 menu.last->dataptr = node

 append_menu_item menu, ""
 menu.last->unselectable = YES
 append_menu_item menu, " OUYA Developer ID"
 menu.last->unselectable = YES
 menu.last->col = uilook(eduiHeading)

 node = GetOrCreateChild(ouya_node, "developer_id")
 append_menu_item menu, "> " & GetString(node)
 menu.last->t = editpurchSTRING
 menu.last->sub_t = 36
 menu.last->dataptr = node

 node = GetOrCreateChild(ouya_node, "key.der")
 DIM key_der_size as integer = LEN(GetString(node))
 IF key_der_size THEN
  cap = "Replace OUYA key.der file (" & key_der_size & " bytes)"
 ELSE
  cap = "Import OUYA key.der file"
 END IF
 append_menu_item menu, cap
 menu.last->t = editpurchKEYDER
 menu.last->dataptr = node

 append_menu_item menu, ""
 menu.last->unselectable = YES
 append_menu_item menu, " Purchaseable Products"
 menu.last->unselectable = YES
 menu.last->col = uilook(eduiHeading)

 READNODE products
  WITHNODE products."prod" as prod
   DIM n as NodePtr
   n = GetOrCreateChild(prod, "displayname")
   append_menu_item menu, "Product: " & GetString(n)
   menu.last->t = editpurchPROD
   menu.last->dataptr = prod
  END WITHNODE
 END READNODE
 
 append_menu_item menu, "Add a new product"
 menu.last->t = editpurchADD

 init_menu_state st, menu
END SUB

FUNCTION edit_purchase_enumbrowse(caption as string, byval node as NodePtr, enumstr() as string, helpkey as string) as bool
 DIM choice as integer
 DIM old as integer
 old = a_find(enumstr(), GetString(node), 0)
 choice = multichoice(caption, enumstr(), old, old, helpkey)
 IF choice <> old THEN
  SetContent(node, enumstr(choice))
  RETURN YES
 END IF
 RETURN NO
END FUNCTION

FUNCTION edit_purchase_enumgrabber(byval node as NodePtr, enumstr() as string) as bool
 DIM choice as integer
 choice = a_find(enumstr(), GetString(node), 0)
 IF intgrabber(choice, 0, UBOUND(enumstr)) THEN
  SetContent(node, enumstr(choice))
  RETURN YES
 END IF
 RETURN NO
END FUNCTION

SUB edit_purchase_details (byval prod as NodePtr)
 DIM menu as MenuDef
 DIM st as MenuState
 st.active = YES
 st.need_update = YES

 DIM t as integer
 DIM sub_t as integer
 DIM node as NodePtr

 DIM n as NodePtr
 DIM store as NodePtr
 DIM buy_action as NodePtr
 DIM cap as string
 DIM num as integer

 setkeys YES
 DO
  setwait 55
  setkeys YES
  IF keyval(scF1) > 1 THEN show_help "edit_purchase_details"
  IF keyval(ccCancel) > 1 THEN EXIT DO

  IF st.need_update THEN
   st.need_update = NO
   InitLikeStandardMenu menu

   append_menu_item menu, "Previous menu..."
   menu.last->t = editpurchEXIT
   
   n = GetOrCreateChild(prod, "displayname")
   append_menu_item menu, "Name: " & GetString(n)
   menu.last->t = editpurchSTRING
   menu.last->sub_t = 128
   menu.last->dataptr = n

   n = GetOrCreateChild(prod, "description")
   append_menu_item menu, "Description: " & GetString(n)
   menu.last->t = editpurchLONGSTRING
   menu.last->sub_t = 99999
   menu.last->dataptr = n

   append_menu_item menu, "Can be purchased: " & IIF(prod."repeatable".exists, "Repeatedly", "Only Once")
   menu.last->t = editpurchTOGGLEREPEATABLE
   menu.last->dataptr = prod

   n = GetOrCreateChild(prod, "already")
   IF GetString(n) = "" THEN SetContent(n, "Already purchased")
   append_menu_item menu, "Already caption: " & GetString(n)
   menu.last->t = editpurchLONGSTRING
   menu.last->sub_t = 99999
   menu.last->dataptr = n

   append_menu_item menu, ""
   menu.last->unselectable = YES
   append_menu_item menu, " OUYA Store Settings"
   menu.last->unselectable = YES
   menu.last->col = uilook(eduiHeading)

   store = GetOrCreateChild(prod, "ouya")
   n = GetOrCreateChild(store, "identifier")
   append_menu_item menu, "Identifier: " & GetString(n)
   menu.last->t = editpurchSTRING
   menu.last->sub_t = 128
   menu.last->dataptr = n

   append_menu_item menu, ""
   menu.last->unselectable = YES
   append_menu_item menu, " Paypal Settings"
   menu.last->unselectable = YES
   menu.last->col = uilook(eduiHeading)

   store = GetOrCreateChild(prod, "paypal")
   n = GetOrCreateChild(store, "button_id")
   append_menu_item menu, "Button ID: " & GetString(n)
   menu.last->t = editpurchSTRING
   menu.last->sub_t = 128
   menu.last->dataptr = n

   append_menu_item menu, ""
   menu.last->unselectable = YES
   append_menu_item menu, " Purchase Action"
   menu.last->unselectable = YES
   menu.last->col = uilook(eduiHeading)

   buy_action = GetOrCreateChild(prod, "buy_action")
   
   n = GetOrCreateChild(buy_action, "tag")
   num = GetInteger(n)
   cap = "Turn ON Tag "
   IF num > 1 THEN
    cap &= num & " (" & load_tag_name(num) & ")"
   ELSEIF num = 1 THEN
    cap &= num & " [Cannot be changed!]"
   ELSE
    cap &= "[None selected]"
   END IF
   append_menu_item menu, cap
   menu.last->t = editpurchTAGSET
   menu.last->dataptr = n
   
   n = GetOrCreateChild(buy_action, "global")
   num = GetInteger(n)
   cap = "+1 to Global Variable ID " & zero_default(num, "[None selected]")
   append_menu_item menu, cap
   menu.last->t = editpurchINT
   menu.last->sub_t = maxScriptGlobals
   menu.last->dataptr = n

   n = GetOrCreateChild(buy_action, "thanks")
   IF GetString(n) = "" THEN SetContent(n, "Thank you!")
   append_menu_item menu, "Thanks Message: " & GetString(n)
   menu.last->t = editpurchLONGSTRING
   menu.last->sub_t = 99999
   menu.last->dataptr = n

   init_menu_state st, menu
  END IF '--done updating menu

  usemenu st, menu

  t = menu.items[st.pt]->t
  sub_t = menu.items[st.pt]->sub_t
  node = menu.items[st.pt]->dataptr
  
  SELECT CASE t
   CASE editpurchSTRING, editpurchLONGSTRING:
    IF node THEN
     DIM curstr as string
     curstr = GetString(node)
     IF strgrabber(curstr, sub_t) THEN
      SetContent(node, curstr)
      st.need_update = YES
     END IF
    END IF
   CASE editpurchTAGSET:
    IF node THEN
     DIM curint as integer
     curint = GetInteger(node)
     IF intgrabber(curint, 0, 99999) THEN
      SetContent(node, curint)
      st.need_update = YES
     END IF
    END IF
   CASE editpurchINT:
    IF node THEN
     DIM curint as integer
     curint = GetInteger(node)
     IF intgrabber(curint, 0, sub_t) THEN
      SetContent(node, curint)
      st.need_update = YES
     END IF
    END IF
   CASE editpurchTOGGLEREPEATABLE:
    IF enter_space_click(st) ORELSE keyval(ccLeft) > 1 ORELSE keyval(ccRight) > 1 THEN
     ToggleChildNode node, "repeatable"
     st.need_update = YES
    END IF
  END SELECT
  
  IF enter_space_click(st) THEN
   SELECT CASE t
    CASE editpurchEXIT: EXIT DO
    CASE editpurchTAGSET:
     SetContent(node, tags_menu(GetInteger(node), YES, NO))
     st.need_update = YES
   END SELECT
  END IF
  
  IF keyval(scAnyEnter) > 1 THEN
   SELECT CASE t
    CASE editpurchLONGSTRING:
     SetContent(node, multiline_string_editor(GetString(node)))
     st.need_update = YES
   END SELECT
  END IF
  
  clearpage dpage
  
  draw_menu menu, st, dpage
  SWAP vpage, dpage
  setvispage vpage
  
  dowait
 LOOP
END SUB

TYPE SavegameOptionsEditor EXTENDS EditorKit
 DECLARE SUB define_items()
END TYPE

SUB edit_savegame_options
 'Set default
 IF gen(genSaveSlotCount) <= 0 THEN gen(genSaveSlotCount) = 4

 DIM editor as SavegameOptionsEditor
 editor.helpkey = "savegame_options"
 editor.run()
 write_general_reld
END SUB

SUB SavegameOptionsEditor.define_items()
 DIM save_options_node as NodePtr = GetOrCreateChild(get_general_reld(), "saved_games")

 defint "Number of save/load slots:", gen(genSaveSlotCount), 1, maxSaveSlotCount
 defitem "Name of saves directory:"
 edit_node_str save_options_node, "/savename", "", 30, Delete_If_Default
 valuestr = fixfilename(valuestr)
 IF LEN(valuestr) = 0 THEN set_caption "(default)"

 defitem "Save script/sprite layer slices:"
 edit_node_exists save_options_node, "/sprite_layer"
 defitem "Save strings:"
 edit_node_exists save_options_node, "/strings"
END SUB

FUNCTION npc_preview_text(byref npc as NPCType) as string
 'This is certaily not an attempt to show everything one might need to
 'know about an NPC, simply a way of showing a little more data so that
 'NPCs with the same sprite can be easily distinguished in the editor at a glance
 IF npc.textbox > 0 THEN RETURN textbox_preview_line(npc.textbox)
 IF npc.script <> 0 THEN RETURN scriptname(npc.script) & " [SCRIPT]"
 IF npc.item > 0 THEN RETURN readitemname(npc.item - 1) & " [ITEM]"
 IF npc.vehicle > 0 THEN RETURN load_vehicle_name(npc.vehicle - 1) & " [VEHICLE]"
END FUNCTION

SUB mark_non_elemental_elementals ()
 DIM g as NodePtr = get_general_reld()
 DIM elementals as NodePtr = GetOrCreateChild(g, "elementals")
 DIM non_elemental as NodePtr
 DIM eid as integer
 DIM bits(3) as integer

 DIM names() as string
 getelementnames names()
 FOR i as integer = 0 to UBOUND(names)
  names(i) = "Treat " & names(i) & " attacks as non-elemental"
 NEXT i
 
 READNODE elementals
  WITHNODE elementals."element" as e
   eid = GetInteger(e)
   IF eid >= 0 ANDALSO eid < maxElements THEN
    non_elemental = GetOrCreateChild(e, "non_elemental")
    setbit bits(), 0, eid, GetInteger(non_elemental)
   END IF
  END WITHNODE
 END READNODE

 editbitset bits(), 0, names(), "non_elemental_elementals"

 DIM saved(maxElements - 1) as bool

 READNODE elementals
  WITHNODE elementals."element" as e
   eid = GetInteger(e)
   IF eid >= 0 ANDALSO eid < maxElements THEN
    non_elemental = GetOrCreateChild(e, "non_elemental")
    SetContent non_elemental, IIF(xreadbit(bits(), eid), 1, 0)
    saved(eid) = YES
   END IF
  END WITHNODE
 END READNODE

 DIM e as NodePtr
 FOR i as integer = 0 TO maxElements - 1
  IF NOT saved(i) THEN
   e = AppendChildNode(elementals, "element", i)
   SetChildNode(e, "non_elemental", IIF(xreadbit(bits(), i), 1, 0))
  END IF
 NEXT i

 write_general_reld() 
END SUB

FUNCTION custom_setoption(opt as string, arg as string) as integer
 IF opt = "distrib" THEN
  SELECT CASE arg
   CASE "zip", "win", "mac", "mac32", "mac64", "tarball", "tarball64", "tarball32", "debian", "debian64", "debian32", "all"
    auto_distrib = arg
    RETURN 2
  END SELECT
  debug "-distrib doesn't know how to export """ & arg & """"
  RETURN 1
 ELSEIF opt = "nowait" THEN
  option_nowait = YES
  RETURN 1
 ELSEIF opt = "export-trans" THEN
  IF LEN(arg) THEN
   export_translations_to = arg
   RETURN 2
  ELSE
   RETURN 1
  END IF
 END IF
 RETURN 0
END FUNCTION

'Destructors can't be abstract...
DESTRUCTOR RecordPreviewer()
END DESTRUCTOR
